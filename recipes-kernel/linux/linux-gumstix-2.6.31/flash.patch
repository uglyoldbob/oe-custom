diff --git a/drivers/mtd/maps/gumstix-flash.c b/drivers/mtd/maps/gumstix-flash.c
index e69de29..5ee1a85 100644
--- a/drivers/mtd/maps/gumstix-flash.c
+++ b/drivers/mtd/maps/gumstix-flash.c
@@ -0,0 +1,139 @@
+/*
+ * Map driver for the Gumstix platform
+ *
+ * Author:	Craig Hughes
+ * 
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/map.h>
+#include <linux/mtd/partitions.h>
+#include <asm/io.h>
+#include <mach/hardware.h>
+
+
+#define ROM_ADDR	0x00000000
+#define FLASH_ADDR	0x00000000
+
+#define WINDOW_SIZE 	64*1024*1024
+
+static struct map_info gumstix_flash_maps[1] = { {
+	.name =		"Gumstix Flash ROM",
+	.size =		WINDOW_SIZE,
+	.phys =		FLASH_ADDR,
+	.bankwidth =	2,
+} };
+
+static struct mtd_partition gumstix_flash_partitions[] = {
+	{
+		.name =		"Bootloader",
+		.size =		0x00040000,
+		.offset =	FLASH_ADDR
+	},{
+		.name =		"RootFS",
+		.size =		MTDPART_SIZ_REMAINDER,
+		.offset =	MTDPART_OFS_NXTBLK
+	},{
+		.name =		"Kernel",
+		.size =		0x00160000,
+		.offset =	MTDPART_OFS_NXTBLK
+	}
+};
+
+static struct mtd_info *mymtds[1];
+static struct mtd_partition *parsed_parts[1];
+static int nr_parsed_parts[1];
+
+static const char *probes[] = { NULL };
+
+static int __init gumstix_flashmap_init(void)
+{
+	int ret = 0, i;
+
+	for (i = 0; i < 1; i++) {
+		gumstix_flash_maps[i].virt = ioremap(gumstix_flash_maps[i].phys, WINDOW_SIZE);
+		if (!gumstix_flash_maps[i].virt) {
+			printk(KERN_WARNING "Failed to ioremap %s\n", gumstix_flash_maps[i].name);
+			if (!ret)
+				ret = -ENOMEM;
+			continue;
+		}
+		simple_map_init(&gumstix_flash_maps[i]);
+
+		printk(KERN_NOTICE "Probing %s at physical address 0x%08lx (%d-bit bankwidth)\n",
+		       gumstix_flash_maps[i].name, gumstix_flash_maps[i].phys, 
+		       gumstix_flash_maps[i].bankwidth * 8);
+
+		mymtds[i] = do_map_probe("cfi_probe", &gumstix_flash_maps[i]);
+		
+		if (!mymtds[i]) {
+			iounmap((void *)gumstix_flash_maps[i].virt);
+			if (gumstix_flash_maps[i].cached)
+				iounmap(gumstix_flash_maps[i].cached);
+			if (!ret)
+				ret = -EIO;
+			continue;
+		}
+		mymtds[i]->owner = THIS_MODULE;
+
+		ret = parse_mtd_partitions(mymtds[i], probes,
+					   &parsed_parts[i], 0);
+
+		if (ret > 0)
+			nr_parsed_parts[i] = ret;
+	}
+
+	if (!mymtds[0])
+		return ret;
+	
+	for (i = 0; i < 1; i++) {
+		if (!mymtds[i]) {
+			printk(KERN_WARNING "%s is absent. Skipping\n", gumstix_flash_maps[i].name);
+		} else if (nr_parsed_parts[i]) {
+			add_mtd_partitions(mymtds[i], parsed_parts[i], nr_parsed_parts[i]);
+		} else if (!i) {
+			printk("Using static partitions on %s\n", gumstix_flash_maps[i].name);
+			add_mtd_partitions(mymtds[i], gumstix_flash_partitions, ARRAY_SIZE(gumstix_flash_partitions));
+		} else {
+			printk("Registering %s as whole device\n", gumstix_flash_maps[i].name);
+			add_mtd_device(mymtds[i]);
+		}
+	}
+	return 0;
+}
+
+static void __exit gumstix_flashmap_cleanup(void)
+{
+	int i;
+	for (i = 0; i < 1; i++) {
+		if (!mymtds[i])
+			continue;
+
+		if (nr_parsed_parts[i] || !i)
+			del_mtd_partitions(mymtds[i]);
+		else
+			del_mtd_device(mymtds[i]);			
+
+		map_destroy(mymtds[i]);
+		iounmap((void *)gumstix_flash_maps[i].virt);
+		if (gumstix_flash_maps[i].cached)
+			iounmap(gumstix_flash_maps[i].cached);
+
+		if (parsed_parts[i])
+			kfree(parsed_parts[i]);
+	}
+}
+
+module_init(gumstix_flashmap_init);
+module_exit(gumstix_flashmap_cleanup);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Gumstix, Inc. <gumstix-users@lists.sf.net>");
+MODULE_DESCRIPTION("MTD map driver for the Gumstix Platform");
diff --git a/include/linux/mtd/partitions.h b/include/linux/mtd/partitions.h
index 7535a74..cc3e644 100644
--- a/include/linux/mtd/partitions.h
+++ b/include/linux/mtd/partitions.h
@@ -45,6 +45,7 @@ struct mtd_partition {
 
 #define MTDPART_OFS_NXTBLK	(-2)
 #define MTDPART_OFS_APPEND	(-1)
+#define MTDPART_SIZ_REMAINDER	(-3)
 #define MTDPART_SIZ_FULL	(0)


diff --git a/drivers/mtd/mtdpart.c b/drivers/mtd/mtdpart.c
index 29675ed..cdb831e 100644
--- a/drivers/mtd/mtdpart.c
+++ b/drivers/mtd/mtdpart.c
@@ -332,9 +332,10 @@ EXPORT_SYMBOL(del_mtd_partitions);
 
 static struct mtd_part *add_one_partition(struct mtd_info *master,
 		const struct mtd_partition *part, int partno,
-		uint64_t cur_offset)
+		uint64_t cur_offset, int nbparts)
 {
 	struct mtd_part *slave;
+	int j;
 
 	/* allocate the partition structure */
 	slave = kzalloc(sizeof(*slave), GFP_KERNEL);
@@ -429,6 +430,12 @@ static struct mtd_part *add_one_partition(struct mtd_info *master,
 	if (slave->mtd.size == MTDPART_SIZ_FULL)
 		slave->mtd.size = master->size - slave->offset;
 
+	if (slave->mtd.size == MTDPART_SIZ_REMAINDER)
+	{
+		slave->mtd.size = master->size - slave->offset;
+		for(j=partno+1; j<nbparts; j++) slave->mtd.size -= (part+1)->size;
+	}
+
 	printk(KERN_NOTICE "0x%012llx-0x%012llx : \"%s\"\n", (unsigned long long)slave->offset,
 		(unsigned long long)(slave->offset + slave->mtd.size), slave->mtd.name);
 
@@ -532,7 +539,8 @@ int add_mtd_partitions(struct mtd_info *master,
 	printk(KERN_NOTICE "Creating %d MTD partitions on \"%s\":\n", nbparts, master->name);
 
 	for (i = 0; i < nbparts; i++) {
-		slave = add_one_partition(master, parts + i, i, cur_offset);
+
+		slave = add_one_partition(master, parts + i, i, cur_offset, nbparts);
 		if (!slave)
 			return -ENOMEM;
 		cur_offset = slave->offset + slave->mtd.size;
diff --git a/drivers/mtd/maps/Kconfig b/drivers/mtd/maps/Kconfig
index 5d590fe..fac228e 100644
--- a/drivers/mtd/maps/Kconfig
+++ b/drivers/mtd/maps/Kconfig
@@ -169,6 +169,13 @@ config MTD_SBC_GXX
 	  More info at
 	  <http://www.arcomcontrols.com/products/icp/pc104/processors/SBC_GX1.htm>.
 
+config MTD_GUMSTIX
+	tristate "CFI Flash device mapped on Gumstix"
+	depends on ARCH_GUMSTIX && MTD_CFI_INTELEXT && MTD_PARTITIONS
+	help
+	  This provides a driver for the on-board flash of the Gumstix
+	  single board computers.
+
 config MTD_PXA2XX
 	tristate "CFI Flash device mapped on Intel XScale PXA2xx based boards"
 	depends on (PXA25x || PXA27x) && MTD_CFI_INTELEXT
diff --git a/drivers/mtd/maps/Makefile b/drivers/mtd/maps/Makefile
index a394017..97eb0bd 100644
--- a/drivers/mtd/maps/Makefile
+++ b/drivers/mtd/maps/Makefile
@@ -18,6 +18,7 @@ obj-$(CONFIG_MTD_ESB2ROM)	+= esb2rom.o
 obj-$(CONFIG_MTD_ICHXROM)	+= ichxrom.o
 obj-$(CONFIG_MTD_CK804XROM)	+= ck804xrom.o
 obj-$(CONFIG_MTD_TSUNAMI)	+= tsunami_flash.o
+obj-$(CONFIG_MTD_GUMSTIX)	+= gumstix-flash.o
 obj-$(CONFIG_MTD_PXA2XX)	+= pxa2xx-flash.o
 obj-$(CONFIG_MTD_MBX860)	+= mbx860.o
 obj-$(CONFIG_MTD_CEIVA)		+= ceiva.o
