From 9e1083e9cc9117ec9083a6360060a49299069196 Mon Sep 17 00:00:00 2001
From: Thomas Epperson <tepperson@briskheat.com>
Date: Mon, 29 Oct 2018 09:28:03 -0400
Subject: [PATCH] Add memory map joystick support.

---
 arch/arm/boot/dts/de0Test.dts |  10 +++-
 drivers/input/misc/Kconfig    |   8 +++
 drivers/input/misc/Makefile   |   1 +
 drivers/input/misc/mmjoy.c    | 118 ++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 135 insertions(+), 2 deletions(-)
 create mode 100644 drivers/input/misc/mmjoy.c

diff --git a/arch/arm/boot/dts/de0Test.dts b/arch/arm/boot/dts/de0Test.dts
index 4eba40d..4a02153 100644
--- a/arch/arm/boot/dts/de0Test.dts
+++ b/arch/arm/boot/dts/de0Test.dts
@@ -4,8 +4,14 @@
 	fb0: fb0@0xc0000000
 	{
 		compatible = "ili9341";
-		reg = <0xc0000000 32>;
-	};	
+		reg = <0xc0000000 256>;
+	};
+	inp0: inp0@0xc0000100
+	{
+		compatible = "mmjoy";
+		reg = <0xc0000100 256>;
+		num_inputs = <6>;
+	};
 };
 
 &fpga_bridge1 {
diff --git a/drivers/input/misc/Kconfig b/drivers/input/misc/Kconfig
index 3872488..de18419 100644
--- a/drivers/input/misc/Kconfig
+++ b/drivers/input/misc/Kconfig
@@ -12,6 +12,14 @@ menuconfig INPUT_MISC
 
 if INPUT_MISC
 
+config INPUT_MMJOY
+	tristate "Memory mapped digital input (joystick) support"
+	select INPUT_POLLDEV
+	help
+	  Support input devices that are memory mapped.
+	  All inputs are single bit and densely packed.
+	  8 inputs per byte
+
 config INPUT_88PM860X_ONKEY
 	tristate "88PM860x ONKEY support"
 	depends on MFD_88PM860X
diff --git a/drivers/input/misc/Makefile b/drivers/input/misc/Makefile
index b923a98..fdc7ee8 100644
--- a/drivers/input/misc/Makefile
+++ b/drivers/input/misc/Makefile
@@ -78,3 +78,4 @@ obj-$(CONFIG_INPUT_WM831X_ON)		+= wm831x-on.o
 obj-$(CONFIG_INPUT_XEN_KBDDEV_FRONTEND)	+= xen-kbdfront.o
 obj-$(CONFIG_INPUT_YEALINK)		+= yealink.o
 obj-$(CONFIG_INPUT_IDEAPAD_SLIDEBAR)	+= ideapad_slidebar.o
+obj-$(CONFIG_INPUT_MMJOY)		+= mmjoy.o
diff --git a/drivers/input/misc/mmjoy.c b/drivers/input/misc/mmjoy.c
new file mode 100644
index 0000000..b5af61a
--- /dev/null
+++ b/drivers/input/misc/mmjoy.c
@@ -0,0 +1,118 @@
+#include <linux/device.h>
+#include <linux/input.h>
+#include <linux/input-polldev.h>
+#include <linux/io.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/types.h>
+
+struct mmjoy
+{
+	struct input_polled_dev *poll_dev;
+	struct device *dev;
+	int num_inputs;
+	void __iomem *regs;
+};
+
+static void mmjoy_poll(struct input_polled_dev *poll_dev)
+{
+	struct mmjoy *data = poll_dev->private;
+	int i, j;
+	int num_words;
+	uint16_t temp;
+
+	num_words = (data->num_inputs / 16);
+	num_words += ((data->num_inputs % 16)?1:0);
+	for (i = 0; i < num_words; i++)
+	{
+		temp = ioread16(data->regs + i*16);
+		for (j = 0; j < 16; j++)
+		{
+			if ((i*16 + j) < data->num_inputs)
+			{
+				input_report_key(poll_dev->input, i * 16 + j + 1, temp & (1<<j));
+			}
+		}
+	}
+}
+
+static int mmjoy_probe(struct platform_device *pdev)
+{
+	struct device *dev;
+	struct input_polled_dev *poll_dev;
+	struct mmjoy *data;
+	struct resource *mem;
+	int err;
+	int i;
+
+	dev = &pdev->dev;
+	data = devm_kzalloc(dev, sizeof(struct mmjoy), GFP_KERNEL);
+	data->dev = dev;
+
+	mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	printk(KERN_ALERT "mmjoy: Address 0x%x", mem->start);
+	data->regs = devm_ioremap_resource(dev, mem);
+
+	if (IS_ERR(data->regs))
+	{
+		printk(KERN_ALERT "mmjoy: Registers error");
+		return PTR_ERR(data->regs);
+	}
+
+	device_property_read_u32(dev, "num_inputs", &data->num_inputs);
+	printk(KERN_ALERT "mmjoy: %d inputs", data->num_inputs);
+
+	if (data->num_inputs == 0)
+	{
+		printk(KERN_ALERT "mmjoy: 0 inputs is invalid");
+		return -EINVAL;
+	}
+
+	poll_dev = devm_input_allocate_polled_device(data->dev);
+	if (!poll_dev)
+		return -ENOMEM;
+
+	poll_dev->private = data;
+	poll_dev->poll = mmjoy_poll;
+	data->poll_dev = poll_dev;
+
+	poll_dev->input->name = pdev->name;
+	poll_dev->input->id.bustype = BUS_HOST;
+
+	err = input_register_polled_device(poll_dev);
+	if (err)
+	{
+		printk(KERN_ALERT "mmjoy: failed to register polled device");
+		return err;
+	}
+
+	for (i = 0; i < data->num_inputs; i++)
+	{
+		input_set_capability(poll_dev->input, EV_KEY, i + 1);
+	}
+
+	return 0;
+}
+
+#ifdef CONFIG_OF
+static const struct of_device_id mmjoy_of_match[] = {
+	{ .compatible = "mmjoy", },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, mmjoy_of_match);
+#endif
+
+static struct platform_driver mmjoy_driver = {
+	.probe		= mmjoy_probe,
+	.driver		= {
+		.name	= "mmjoy",
+		.of_match_table = of_match_ptr(mmjoy_of_match),
+	}
+};
+module_platform_driver(mmjoy_driver);
+
+MODULE_AUTHOR("Thomas Epperson <tepperson@briskheat.com>");
+MODULE_DESCRIPTION("Memory mapped input driver");
+MODULE_LICENSE("GPL");
-- 
1.9.1

