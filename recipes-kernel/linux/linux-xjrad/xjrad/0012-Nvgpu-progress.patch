From 210fed422d87a6b0c8a0681d4def0c34de6c49ac Mon Sep 17 00:00:00 2001
From: Thomas Epperson <thomas.epperson@snapon.com>
Date: Thu, 26 Sep 2024 16:28:28 -0500
Subject: [PATCH] Nvgpu progress
Upstream-Status: Pending

---
 arch/arm64/boot/dts/uglyoldbob/xjrad.dts      | 102 +++++--
 drivers/clk/tegra/clk-dfll.c                  |  15 +
 drivers/clk/tegra/clk-tegra124-dfll-fcpu.c    |  12 +
 drivers/clk/tegra/clk-tegra210.c              |   1 +
 drivers/extcon/Kconfig                        |   7 +
 drivers/extcon/Makefile                       |   1 +
 drivers/extcon/extcon-disp-state.c            | 178 ++++++++++++
 drivers/platform/Kconfig                      |  16 ++
 drivers/platform/tegra/tegra_fd.c             |  25 ++
 drivers/pwm/pwm-tegra.c                       |  13 +
 drivers/soc/tegra/tegra-dvfs.c                |  38 ++-
 drivers/soc/tegra/tegra210-core-dvfs.c        | 249 +++++++++++++++++
 drivers/soc/tegra/tegra210-dvfs.c             |  60 +++-
 drivers/soc/tegra/tegra210b01-core-dvfs.c     | 260 ++++++++++++++++++
 drivers/soc/tegra/tegra210b01-slt-core-dvfs.c | 260 ++++++++++++++++++
 drivers/video/Kconfig                         |  16 ++
 drivers/video/tegra/nvgpu/os/linux/fuse.c     |   6 +-
 .../video/tegra/nvgpu/os/linux/nvidia_p2p.c   |  19 +-
 .../nvgpu/os/linux/platform_gk20a_tegra.c     |  31 +--
 drivers/video/tegra/nvmap/nvmap_init.c        |   4 +-
 drivers/video/tegra/nvmap/nvmap_ioctl.c       |   3 +-
 .../dt-bindings/thermal/tegra210b01-trips.h   |  28 ++
 include/soc/tegra/fuse.h                      |   2 +
 include/soc/tegra/tegra_emc.h                 | 110 ++++++++
 24 files changed, 1382 insertions(+), 74 deletions(-)
 create mode 100644 drivers/extcon/extcon-disp-state.c
 create mode 100644 drivers/platform/tegra/tegra_fd.c
 create mode 100644 drivers/soc/tegra/tegra210-core-dvfs.c
 create mode 100644 drivers/soc/tegra/tegra210b01-core-dvfs.c
 create mode 100644 drivers/soc/tegra/tegra210b01-slt-core-dvfs.c
 create mode 100644 include/dt-bindings/thermal/tegra210b01-trips.h
 create mode 100644 include/soc/tegra/tegra_emc.h

diff --git a/arch/arm64/boot/dts/uglyoldbob/xjrad.dts b/arch/arm64/boot/dts/uglyoldbob/xjrad.dts
index 38402beb2535..9a45874a6822 100644
--- a/arch/arm64/boot/dts/uglyoldbob/xjrad.dts
+++ b/arch/arm64/boot/dts/uglyoldbob/xjrad.dts
@@ -119,12 +119,12 @@ i2c@546c0000 {
 		};
 	};
 	
-	uarta {
-		status = "okay";
+	dvfs {
+		compatible = "nvidia,tegra210-dvfs";
 	};
 
 	gpu@57000000 {
-		vdd-supply = <&vdd_gpu>;
+		vdd-supply = <&gpu_ovr_reg>;
 		nvidia,host1x = <&host1x>;
 		access-vpr-phys;
 		status = "okay";
@@ -283,7 +283,7 @@ regulators {
 				in-sd3-supply = <&vdd_5v0_sys>;
 
 				vdd_soc: sd0 {
-					regulator-name = "VDD_SOC";
+					regulator-name = "vdd-core";
 					regulator-min-microvolt = <1000000>;
 					regulator-max-microvolt = <1170000>;
 					regulator-enable-ramp-delay = <146>;
@@ -1750,6 +1750,13 @@ clk32k_in: clock-32k {
 	cpus {
 		cpu@0 {
 			enable-method = "psci";
+			clocks = <&tegra_car TEGRA210_CLK_CCLK_G>,
+				 <&tegra_car TEGRA210_CLK_CCLK_LP>,
+				 <&tegra_car TEGRA210_CLK_PLL_X>,
+				 <&tegra_car TEGRA210_CLK_PLL_P_OUT4>,
+				 <&dfll>;
+			clock-names = "cpu_g", "cpu_lp", "pll_x", "pll_p", "dfll";
+			clock-latency = <300000>;
 		};
 
 		cpu@1 {
@@ -1867,13 +1874,59 @@ vdd_hub_3v3: regulator-vdd-hub-3v3 {
 		regulator-always-on;
 		vin-supply = <&vdd_5v0_sys>;
 	};
+	
+	pwm_regulators {
+		compatible = "simple-bus";
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		cpu_ovr_reg: pwm-regulator@0 {
+			status = "okay";
+			reg = <0>;
+			compatible = "pwm-regulator";
+			pwms = <&dfll 0 2500>;
+			regulator-name = "vdd-cpu";
+			regulator-min-microvolt = <708000>;
+			regulator-max-microvolt = <1322400>;
+			regulator-always-on;
+			regulator-boot-on;
+			voltage-table =
+				<708000 0>, <727200 1>, <746400 2>,
+				<765600 3>, <784800 4>, <804000 5>,
+				<823200 6>, <842400 7>, <861600 8>,
+				<880800 9>, <900000 10>, <919200 11>,
+				<938400 12>, <957600 13>, <976800 14>,
+				<996000 15>, <1015200 16>, <1034400 17>,
+				<1053600 18>, <1072800 19>, <1092000 20>,
+				<1111200 21>, <1130400 22>, <1149600 23>,
+				<1168800 24>, <1188000 25>, <1207200 26>,
+				<1226400 27>, <1245600 28>, <1264800 29>,
+				<1284000 30>, <1303200 31>, <1322400 32>;
+		};
+
+		gpu_ovr_reg: pwm-regulator@1 {
+			status = "okay";
+			reg = <1>;
+			compatible = "pwm-regulator";
+			pwms = <&pwm 1 8000>;
+			regulator-name = "vdd-gpu";
+			regulator-min-microvolt = <710000>;
+			regulator-max-microvolt = <1320000>;
+			regulator-init-microvolt = <1000000>;
+			regulator-n-voltages = <62>;
+			regulator-enable-ramp-delay = <2000>;
+			enable-gpio = <&pmic 6 0>;
+			regulator-settling-time-us = <160>;
+                };
+
+	};
 
 	vdd_cpu: regulator-vdd-cpu {
 		compatible = "regulator-fixed";
 
-		regulator-name = "VDD_CPU";
-		regulator-min-microvolt = <5000000>;
-		regulator-max-microvolt = <5000000>;
+		regulator-name = "vdd-cpu";
+		regulator-min-microvolt = <1300000>;
+		regulator-max-microvolt = <1300000>;
 		regulator-always-on;
 		regulator-boot-on;
 
@@ -1882,19 +1935,16 @@ vdd_cpu: regulator-vdd-cpu {
 
 		vin-supply = <&vdd_5v0_sys>;
 	};
+	
+	vdd_core: regulator-vdd-core {
+		compatible = "regulator-fixed";
 
-	vdd_gpu: regulator-vdd-gpu {
-		compatible = "pwm-regulator";
-		pwms = <&pwm 1 8000>;
-
-		regulator-name = "VDD_GPU";
-		regulator-min-microvolt = <710000>;
-		regulator-max-microvolt = <1320000>;
-		regulator-ramp-delay = <80>;
-		regulator-enable-ramp-delay = <2000>;
-		regulator-settling-time-us = <160>;
+		regulator-name = "vdd-core";
+		regulator-min-microvolt = <1000000>;
+		regulator-max-microvolt = <1170000>;
+		regulator-always-on;
+		regulator-boot-on;
 
-		enable-gpios = <&pmic 6 GPIO_ACTIVE_HIGH>;
 		vin-supply = <&vdd_5v0_sys>;
 	};
 
@@ -2019,3 +2069,19 @@ cpu-passive {
 		};
 	};
 };
+
+&dfll {
+	status = "okay";
+};
+
+&uarta {
+	status = "okay";
+};
+
+&dfll {
+	#pwm-cells = <2>;
+};
+
+&pwm {
+	status = "okay";
+};
diff --git a/drivers/clk/tegra/clk-dfll.c b/drivers/clk/tegra/clk-dfll.c
index a64f134f4ac7..e99bc8a90560 100644
--- a/drivers/clk/tegra/clk-dfll.c
+++ b/drivers/clk/tegra/clk-dfll.c
@@ -1436,6 +1436,17 @@ static void dfll_debug_init(struct tegra_dfll *td)
 static inline void dfll_debug_init(struct tegra_dfll *td) { }
 #endif /* CONFIG_DEBUG_FS */
 
+/**
+ * tegra_dfll_get_cvb_version - return DFLL CVB version
+ */
+const char *tegra_dfll_get_cvb_version(void)
+{
+	if (!tegra_dfll_dev)
+		return ERR_PTR(-EPROBE_DEFER);
+	return tegra_dfll_dev->soc->cvb->cvb_version;
+}
+EXPORT_SYMBOL(tegra_dfll_get_cvb_version);
+
 /*
  * DFLL initialization
  */
@@ -2119,6 +2130,8 @@ int tegra_dfll_register(struct platform_device *pdev,
 	}
 
 	dfll_debug_init(td);
+	
+	tegra_dfll_dev = td;
 
 	return 0;
 }
@@ -2145,6 +2158,8 @@ struct tegra_dfll_soc_data *tegra_dfll_unregister(struct platform_device *pdev)
 			"must disable DFLL before removing driver\n");
 		return ERR_PTR(-EBUSY);
 	}
+	
+	tegra_dfll_dev = NULL;
 
 	debugfs_remove_recursive(td->debugfs_dir);
 
diff --git a/drivers/clk/tegra/clk-tegra124-dfll-fcpu.c b/drivers/clk/tegra/clk-tegra124-dfll-fcpu.c
index a9be4b56b2b7..918e9df626ca 100644
--- a/drivers/clk/tegra/clk-tegra124-dfll-fcpu.c
+++ b/drivers/clk/tegra/clk-tegra124-dfll-fcpu.c
@@ -559,7 +559,10 @@ static int tegra124_dfll_fcpu_probe(struct platform_device *pdev)
 
 	fcpu_data = of_device_get_match_data(&pdev->dev);
 	if (!fcpu_data)
+	{
+		dev_err(&pdev->dev, "Failed to get of_device_get_match_data\n");
 		return -ENODEV;
+	}
 
 	process_id = tegra_sku_info.cpu_process_id;
 	speedo_id = tegra_sku_info.cpu_speedo_id;
@@ -573,7 +576,10 @@ static int tegra124_dfll_fcpu_probe(struct platform_device *pdev)
 
 	soc = devm_kzalloc(&pdev->dev, sizeof(*soc), GFP_KERNEL);
 	if (!soc)
+	{
+		dev_err(&pdev->dev, "Failed to allocate memory\n");
 		return -ENOMEM;
+	}
 
 	soc->dev = get_cpu_device(0);
 	if (!soc->dev) {
@@ -586,7 +592,10 @@ static int tegra124_dfll_fcpu_probe(struct platform_device *pdev)
 	} else {
 		err = get_alignment_from_regulator(&pdev->dev, &align);
 		if (err)
+		{
+			dev_err(&pdev->dev, "Failed get_alignment_from_regulator %d\n", err);
 			return err;
+		}
 	}
 
 	soc->max_freq = fcpu_data->cpu_max_freq_table[speedo_id];
@@ -605,9 +614,12 @@ static int tegra124_dfll_fcpu_probe(struct platform_device *pdev)
 
 	err = tegra_dfll_register(pdev, soc);
 	if (err < 0) {
+		dev_err(&pdev->dev, "Failed to dfll_register: %d\n", err);
 		tegra_cvb_remove_opp_table(soc->dev, soc->cvb, soc->max_freq);
 		return err;
 	}
+	
+	dev_err(&pdev->dev, "SUCCESS\n");
 
 	return 0;
 }
diff --git a/drivers/clk/tegra/clk-tegra210.c b/drivers/clk/tegra/clk-tegra210.c
index a3488aaac3f7..2377e3e553fc 100644
--- a/drivers/clk/tegra/clk-tegra210.c
+++ b/drivers/clk/tegra/clk-tegra210.c
@@ -2621,6 +2621,7 @@ static struct tegra_devclk devclks[] __initdata = {
 	{ .con_id = "pll_c4_out2", .dt_id = TEGRA210_CLK_PLL_C4_OUT2 },
 	{ .con_id = "pll_c4_out3", .dt_id = TEGRA210_CLK_PLL_C4_OUT3 },
 	{ .con_id = "dpaux", .dt_id = TEGRA210_CLK_DPAUX },
+	{ .con_id = "gpu_ref", .dt_id = TEGRA210_CLK_PLL_G_REF },
 };
 
 static struct tegra_audio_clk_info tegra210_audio_plls[] = {
diff --git a/drivers/extcon/Kconfig b/drivers/extcon/Kconfig
index cf472e44c5ff..6059ba3f28f6 100644
--- a/drivers/extcon/Kconfig
+++ b/drivers/extcon/Kconfig
@@ -192,4 +192,11 @@ config EXTCON_USBC_TUSB320
 	  Say Y here to enable support for USB Type C cable detection extcon
 	  support using a TUSB320.
 
+config EXTCON_DISP_STATE
+	tristate "DISPLAY STATE EXTCON support"
+	depends on TEGRA_DC
+	default y
+	help
+	   Say Y here to enable display state cable detection with extcon support.
+
 endif
diff --git a/drivers/extcon/Makefile b/drivers/extcon/Makefile
index 1b390d934ca9..7e0cee293a2b 100644
--- a/drivers/extcon/Makefile
+++ b/drivers/extcon/Makefile
@@ -25,3 +25,4 @@ obj-$(CONFIG_EXTCON_SM5502)	+= extcon-sm5502.o
 obj-$(CONFIG_EXTCON_USB_GPIO)	+= extcon-usb-gpio.o
 obj-$(CONFIG_EXTCON_USBC_CROS_EC) += extcon-usbc-cros-ec.o
 obj-$(CONFIG_EXTCON_USBC_TUSB320) += extcon-usbc-tusb320.o
+obj-$(CONFIG_EXTCON_DISP_STATE)	+= extcon-disp-state.o
diff --git a/drivers/extcon/extcon-disp-state.c b/drivers/extcon/extcon-disp-state.c
new file mode 100644
index 000000000000..17462890b010
--- /dev/null
+++ b/drivers/extcon/extcon-disp-state.c
@@ -0,0 +1,178 @@
+/*
+ * extcon-disp-state - extcon driver for display accessory detection
+ *		compatible with switch-mid
+ *
+ * Copyright (c) 2018-2020, NVIDIA CORPORATION, All rights reserved.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/version.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <linux/extcon/extcon-disp.h>
+#include <linux/extcon.h>
+#include <linux/err.h>
+#include <linux/of.h>
+#include <linux/of_platform.h>
+
+#if KERNEL_VERSION(4, 14, 0) <= LINUX_VERSION_CODE
+#include "extcon.h"
+#endif
+
+#define EXTCON_DISP_AUX_BASE		2
+#define EXTCON_DISP_MAX_AUX_CONNECTORS	4
+
+struct disp_state_extcon_info {
+	struct device *dev;
+	struct extcon_dev *edev;
+};
+
+static const unsigned int disp_state_extcon_cables[] = {
+	EXTCON_DISP_HDMI,
+	EXTCON_DISP_DP,
+	EXTCON_DISP_AUDIO_AUX0,
+	EXTCON_DISP_AUDIO_AUX1,
+	EXTCON_DISP_AUDIO_AUX2,
+	EXTCON_DISP_AUDIO_AUX3,
+	EXTCON_DISP_DSIHPD,
+	EXTCON_DISP_HDMI2,
+	EXTCON_NONE,
+};
+
+static struct disp_state_extcon_info *disp_extcon_info;
+static struct class_compat *switch_class;
+
+void disp_state_extcon_switch_report(const unsigned int cable, bool state)
+{
+	if ((!disp_extcon_info) || (!disp_extcon_info->edev) ||
+		(!disp_extcon_info->dev))
+		return;
+
+#if KERNEL_VERSION(4, 9, 0) > LINUX_VERSION_CODE
+	if (extcon_get_cable_state_(disp_extcon_info->edev, cable) == state) {
+#else
+	if (extcon_get_state(disp_extcon_info->edev, cable) == state) {
+#endif
+		dev_info(disp_extcon_info->dev, "cable %d state %d already set.\n",
+			cable, state);
+		return;
+	}
+
+#if KERNEL_VERSION(4, 9, 0) > LINUX_VERSION_CODE
+	extcon_set_cable_state_(disp_extcon_info->edev, cable, state);
+#else
+	extcon_set_state_sync(disp_extcon_info->edev, cable, state);
+#endif
+	dev_info(disp_extcon_info->dev, "cable %d state %d\n", cable, state);
+}
+
+void disp_state_extcon_aux_report(const unsigned int aux_idx, bool state)
+{
+	if ((!disp_extcon_info) || (!disp_extcon_info->edev) ||
+		(!disp_extcon_info->dev))
+		return;
+
+	if (aux_idx < EXTCON_DISP_MAX_AUX_CONNECTORS) {
+		disp_state_extcon_switch_report(
+			disp_state_extcon_cables[EXTCON_DISP_AUX_BASE +
+			aux_idx], state);
+	} else {
+		dev_info(disp_extcon_info->dev, "AUX%d is invalid\n", aux_idx);
+		return;
+	}
+}
+
+static int disp_state_extcon_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct disp_state_extcon_info *info;
+	int retval = 0;
+
+	info = devm_kzalloc(&pdev->dev, sizeof(*info), GFP_KERNEL);
+	if (!info)
+		return -ENOMEM;
+
+	info->dev = dev;
+	info->edev = devm_extcon_dev_allocate(dev, disp_state_extcon_cables);
+	if (IS_ERR(info->edev)) {
+		dev_err(dev, "failed to allocate extcon device\n");
+		return -ENOMEM;
+	}
+
+	switch_class = class_compat_register("switch_disp_state");
+	if (WARN(!switch_class, "cannot allocate"))
+		return -ENOMEM;
+
+	info->edev->name = "disp_state_ext";
+
+	retval = devm_extcon_dev_register(dev, info->edev);
+	if (retval < 0) {
+		class_compat_unregister(switch_class);
+		dev_err(dev, "failed to register extcon device\n");
+		return retval;
+	}
+
+	retval = class_compat_create_link(switch_class, dev, NULL);
+	if (retval)
+		dev_warn(dev, "Create compatibility class link failed\n");
+
+	platform_set_drvdata(pdev, info);
+	disp_extcon_info = info;
+
+	return 0;
+}
+
+static int disp_state_extcon_remove(struct platform_device *pdev)
+{
+	struct disp_state_extcon_info *extcon_data = platform_get_drvdata(pdev);
+	struct device *dev = &pdev->dev;
+
+	class_compat_remove_link(switch_class, dev, NULL);
+	class_compat_unregister(switch_class);
+	extcon_dev_unregister(extcon_data->edev);
+	disp_extcon_info = NULL;
+	return 0;
+}
+
+static const struct of_device_id of_extcon_disp_state_tbl[] = {
+	{ .compatible = "extcon-disp-state", },
+	{ /* end */ }
+};
+
+MODULE_DEVICE_TABLE(of, of_extcon_disp_state_tbl);
+
+static struct platform_driver disp_state_extcon_driver = {
+	.probe		= disp_state_extcon_probe,
+	.remove		= disp_state_extcon_remove,
+	.driver		= {
+		.name	= "extcon-disp-state",
+		.owner	= THIS_MODULE,
+		.of_match_table = of_extcon_disp_state_tbl,
+	},
+};
+
+static int __init disp_state_extcon_driver_init(void)
+{
+	return platform_driver_register(&disp_state_extcon_driver);
+}
+subsys_initcall_sync(disp_state_extcon_driver_init);
+
+static void __exit disp_state_extcon_driver_exit(void)
+{
+	platform_driver_unregister(&disp_state_extcon_driver);
+}
+module_exit(disp_state_extcon_driver_exit);
+
+MODULE_AUTHOR("Dara Ramesh (dramesh@nvidia.com)");
+MODULE_DESCRIPTION("EXTCON Extcon driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/platform/Kconfig b/drivers/platform/Kconfig
index bdb4ee63fd6b..b81755352c2c 100644
--- a/drivers/platform/Kconfig
+++ b/drivers/platform/Kconfig
@@ -19,3 +19,19 @@ config TEGRA_BWMGR
 	bool "TEGRA_BWMGR"
 	help
 	  The TEGRA_BWMGR
+
+config TEGRA_MC
+        bool "Tegra MC"
+        default y
+        help
+          Enable Tegra MC.
+
+config TEGRA_MC_TRACE_PRINTK
+	bool "Enable trace_printk debugging for MC"
+	depends on FTRACE_PRINTK
+
+config TEGRA_OF_MCERR
+        bool "Tegra MCERR OF"
+        default y
+        help
+          Enable Tegra MC ERR OF.
diff --git a/drivers/platform/tegra/tegra_fd.c b/drivers/platform/tegra/tegra_fd.c
new file mode 100644
index 000000000000..fbc019f9284b
--- /dev/null
+++ b/drivers/platform/tegra/tegra_fd.c
@@ -0,0 +1,25 @@
+/*
+ * Copyright (c) 2018, NVIDIA CORPORATION.  All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ */
+
+#include <linux/fdtable.h>
+#include <linux/fs.h>
+
+#include <linux/platform/tegra/tegra_fd.h>
+
+/* allocates a free fd within [start, sysctl_nr_open) range */
+int tegra_alloc_fd(struct files_struct *files, unsigned int start,
+		   unsigned int flags)
+{
+	return __alloc_fd(files, start, sysctl_nr_open, flags);
+}
+EXPORT_SYMBOL_GPL(tegra_alloc_fd);
diff --git a/drivers/pwm/pwm-tegra.c b/drivers/pwm/pwm-tegra.c
index a169a34e0778..603090213d38 100644
--- a/drivers/pwm/pwm-tegra.c
+++ b/drivers/pwm/pwm-tegra.c
@@ -285,22 +285,34 @@ static int tegra_pwm_probe(struct platform_device *pdev)
 
 	pc->regs = devm_platform_ioremap_resource(pdev, 0);
 	if (IS_ERR(pc->regs))
+	{
+	        dev_err(&pdev->dev, "failed to devm_clk_get %d\n", pc->regs);
 		return PTR_ERR(pc->regs);
+	}
 
 	platform_set_drvdata(pdev, pc);
 
 	pc->clk = devm_clk_get(&pdev->dev, NULL);
 	if (IS_ERR(pc->clk))
+	{
+	        dev_err(&pdev->dev, "failed to devm_clk_get %d\n", pc->clk);
 		return PTR_ERR(pc->clk);
+	}
 
 	ret = devm_tegra_core_dev_init_opp_table_common(&pdev->dev);
 	if (ret)
+	{
+	        dev_err(&pdev->dev, "failed to devm_tegra_core_dev_init_opp_table_common %d\n", ret);
 		return ret;
+	}
 
 	pm_runtime_enable(&pdev->dev);
 	ret = pm_runtime_resume_and_get(&pdev->dev);
 	if (ret)
+	{
+	        dev_err(&pdev->dev, "failed to pm runtime resume and get %d\n", ret);
 		return ret;
+	}
 
 	/* Set maximum frequency of the IP */
 	ret = dev_pm_opp_set_rate(pc->dev, pc->soc->max_frequency);
@@ -341,6 +353,7 @@ static int tegra_pwm_probe(struct platform_device *pdev)
 	}
 
 	pm_runtime_put(&pdev->dev);
+	dev_err(&pdev->dev, "success\n");
 
 	return 0;
 put_pm:
diff --git a/drivers/soc/tegra/tegra-dvfs.c b/drivers/soc/tegra/tegra-dvfs.c
index f5b941de6f63..dabeec5af0ef 100644
--- a/drivers/soc/tegra/tegra-dvfs.c
+++ b/drivers/soc/tegra/tegra-dvfs.c
@@ -423,7 +423,7 @@ static int dvfs_rail_connect_to_regulator(struct device *dev,
 	struct regulator *reg;
 	int v;
 
-	if (!rail->reg) {
+	{
 		mutex_unlock(&dvfs_lock);
 		reg = regulator_get(dev, rail->reg_id);
 		mutex_lock(&dvfs_lock);
@@ -446,9 +446,9 @@ static int dvfs_rail_connect_to_regulator(struct device *dev,
 
 	v = regulator_get_voltage(rail->reg);
 	if (v < 0) {
-		pr_err("tegra_dvfs: failed initial get %s voltage\n",
-		       rail->reg_id);
-		return v;
+		pr_err("tegra_dvfs: failed initial get %s voltage %d\n",
+		       rail->reg_id, v);
+		return -EPROBE_DEFER;
 	}
 
 	if (!rail->min_millivolts) {
@@ -705,11 +705,20 @@ int tegra_get_cpu_fv_table(int *num_freqs, unsigned long **freqs, int **mvs)
 	cpu_dev = get_cpu_device(0);
 	if (!cpu_dev)
 		return -EINVAL;
+	
+	pr_err("tegra_get_cpu_fv_table: cpu is %s \n", cpu_dev->init_name);
+	if (cpu_dev->of_node) {
+	  pr_err("tegra_get_cpu_fv_table: cpu of_node is %s %s\n", cpu_dev->of_node->name, cpu_dev->of_node->full_name);
+	}
+	else {
+	  pr_err("tegra_get_cpu_fv_table: cpu of_node is none\n");
+	}
 
 	mutex_lock(&dvfs_lock);
 	for (i = 0, rate = 0;; rate++) {
 		rcu_read_lock();
 		opp = dev_pm_opp_find_freq_ceil(cpu_dev, &rate);
+		pr_err("tegra_get_cpu_fv_table: %ld %lx\n", rate, (unsigned long)opp);
 		if (IS_ERR(opp)) {
 			rcu_read_unlock();
 			break;
@@ -1637,10 +1646,11 @@ struct dvfs_rail *tegra_dvfs_get_rail_by_name(char *name)
 	struct dvfs_rail *rail;
 
 	list_for_each_entry(rail, &dvfs_rail_list, node) {
+	        pr_err("tegra_dvfs_get_rail_by_name: checking %s for %s\n", rail->reg_id, name);
 		if (!strcmp(rail->reg_id, name))
 			return rail;
 	}
-
+        pr_err("tegra_dvfs_get_rail_by_name: %s not found\n", name);
 	return NULL;
 }
 EXPORT_SYMBOL(tegra_dvfs_get_rail_by_name);
@@ -1835,12 +1845,14 @@ static int tegra_dvfs_regulator_init(struct device *dev)
 	list_for_each_entry(rail, &dvfs_rail_list, node) {
 		err = dvfs_rail_connect_to_regulator(dev, rail);
 		if (err) {
+		        dev_err(dev, "Failed to connect rail to regulator on %s %d\n", rail->reg_id, err);
 			if (!rail->disabled)
 				__tegra_dvfs_rail_disable(rail);
 
 			mutex_unlock(&dvfs_lock);
 			return err;
 		}
+		dev_err(dev, "Success connect rail to regulator on %s\n", rail->reg_id);
 	}
 
 	list_for_each_entry(rail, &dvfs_rail_list, node) {
@@ -2373,21 +2385,32 @@ static int tegra_dvfs_probe(struct platform_device *pdev)
 	dvfs_init_cb_t dvfs_init_cb;
 	struct dvfs_rail *rail;
 	int ret = -EINVAL;
-
+        pr_err("tegra_dvfs: tegra_dvfs_probe\n");
 	match = of_match_node(tegra_dvfs_of_match, pdev->dev.of_node);
 	if (!match)
+	{
+	  pr_err("tegra_dvfs: Failed of_match_node %d\n", match);
 		goto out;
+	}
 
 	dvfs_init_cb = (dvfs_init_cb_t)match->data;
 	ret = dvfs_init_cb(&pdev->dev);
 	if (ret)
+	{
+	  pr_err("tegra_dvfs: failed dvfs_init_cb %lx %d\n", dvfs_init_cb, ret);
 		goto out;
+	}
 
 	ret = tegra_dvfs_regulator_init(&pdev->dev);
 	if (ret)
+	{
+	  pr_err("tegra_dvfs: failed tegra_dvfs_regulator_init %d\n", ret);
+	        ret = -EPROBE_DEFER;
 		goto out;
+	}
 
 	list_for_each_entry(rail, &dvfs_rail_list, node) {
+	        pr_err("tegra_dvfs: set rail %s as ready\n", rail->reg_id);
 		rail->is_ready = true;
 		if (rail->vts_of_node) {
 			char *name;
@@ -2396,11 +2419,12 @@ static int tegra_dvfs_probe(struct platform_device *pdev)
 			rail->vts_cdev = thermal_of_cooling_device_register(
 				rail->vts_of_node, name, rail,
 				&tegra_vts_cooling_ops);
-			pr_info("tegra_dvfs: %s: %sregistered\n", name,
+			pr_err("tegra_dvfs: %s: %sregistered\n", name,
 				IS_ERR_OR_NULL(rail->vts_cdev) ? "not " : "");
 			kfree(name);
 		}
 	}
+	pr_err("tegra_dvfs: tegra_dvfs_probe success\n");
 
 #ifdef CONFIG_DEBUG_FS
 	dvfs_debugfs_init();
diff --git a/drivers/soc/tegra/tegra210-core-dvfs.c b/drivers/soc/tegra/tegra210-core-dvfs.c
new file mode 100644
index 000000000000..8a33da7d288f
--- /dev/null
+++ b/drivers/soc/tegra/tegra210-core-dvfs.c
@@ -0,0 +1,249 @@
+/*
+ * Copyright (c) 2014-2018, NVIDIA CORPORATION.  All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+static const int core_voltages_mv[MAX_DVFS_FREQS] = {
+	800, 825, 850, 875, 900, 925, 950, 975, 1000, 1025, 1050, 1062, 1075, 1100, 1125
+};
+
+static struct dvfs core_dvfs_table[] = {
+/* ID 1 Tables */
+	/* Core voltages(mV):				    800,     825,     850,     875,     900,     925,     950,     975,    1000,    1025,    1050,    1062,    1075,    1100,    1125 */
+	CORE_DVFS("emc",		1, -1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1, 1200000, 1200000, 1200000, 1200000, 1200000, 1200000, 1200000),
+
+	CORE_DVFS("vic03",		1, -1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  601600,  601600),
+	CORE_DVFS("nvjpg",		1, -1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  601600,  601600),
+	CORE_DVFS("se",			1, -1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  601600,  601600),
+	CORE_DVFS("tsecb",		1, -1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  601600,  601600),
+	CORE_DVFS("c2bus",		1, -1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  601600,  601600),
+
+	CORE_DVFS("msenc",		1, -1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  652800,  652800),
+	CORE_DVFS("nvdec",		1, -1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  652800,  652800),
+	CORE_DVFS("c3bus",		1, -1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  652800,  652800),
+
+	CORE_DVFS("vi",			1, -1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  716800,  716800),
+	CORE_DVFS("isp",		1, -1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  716800,  716800),
+	CORE_DVFS("cbus",		1, -1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  716800,  716800),
+
+	CORE_DVFS("adsp_bus",		1, -1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  806400,  806400),
+	CORE_DVFS("ape",		1, -1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  550400,  550400),
+
+	CORE_DVFS("sbus",		1, -1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  408000,  408000),
+	CORE_DVFS("sclk",		1, -1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  408000,  408000),
+	CORE_DVFS("host1x",		1, -1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  408000,  408000),
+	CORE_DVFS("tsec",		1, -1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  408000,  408000),
+	CORE_DVFS("mselect",		1, -1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  408000,  408000),
+
+	CORE_DVFS("disp1",		1, -1, 0, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  614400,  614400),
+	CORE_DVFS("disp2",		1, -1, 0, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,  614400,  614400),
+
+/* ID 0 Tables */
+	/* Core voltages(mV):				    800,     825,     850,     875,     900,     925,     950,     975,    1000,    1025,    1050,    1062,    1075,    1100,    1125 */
+	CORE_DVFS("emc",		0, 0, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1, 1200000, 1200000, 1200000, 1200000, 1200000, 1200000, 1200000),
+
+	CORE_DVFS("vic03",		0, 0, 1, KHZ,	 140800,  140800,  268800,  332800,  371200,  409600,  435200,  473600,  499200,  537600,  563200,  563200,  588800,  601600,  627200),
+	CORE_DVFS("nvjpg",		0, 0, 1, KHZ,	 140800,  140800,  268800,  332800,  371200,  409600,  435200,  473600,  499200,  537600,  563200,  563200,  588800,  601600,  627200),
+	CORE_DVFS("se",			0, 0, 1, KHZ,	 140800,  140800,  268800,  332800,  371200,  409600,  435200,  473600,  499200,  537600,  563200,  563200,  588800,  601600,  627200),
+	CORE_DVFS("tsecb",		0, 0, 1, KHZ,	 140800,  140800,  268800,  332800,  371200,  409600,  435200,  473600,  499200,  537600,  563200,  563200,  588800,  601600,  627200),
+	CORE_DVFS("c2bus",		0, 0, 1, KHZ,	 140800,  140800,  268800,  332800,  371200,  409600,  435200,  473600,  499200,  537600,  563200,  563200,  588800,  601600,  627200),
+
+	CORE_DVFS("nvenc",		0, 0, 1, KHZ,	 192000,  192000,  345600,  396800,  435200,  473600,  512000,  563200,  601600,  627200,  652800,  652800,  678400,  691200,  716800),
+	CORE_DVFS("nvdec",		0, 0, 1, KHZ,	 192000,  192000,  345600,  396800,  435200,  473600,  512000,  563200,  601600,  627200,  652800,  652800,  678400,  691200,  716800),
+	CORE_DVFS("c3bus",		0, 0, 1, KHZ,	 192000,  192000,  345600,  396800,  435200,  473600,  512000,  563200,  601600,  627200,  652800,  652800,  678400,  691200,  716800),
+
+	CORE_DVFS("vi",			0, 0, 1, KHZ,	 217600,  217600,  307200,  307200,  371200,  435200,  499200,  550400,  614400,  678400,  742400,  742400,  793600,  793600,  793600),
+	CORE_DVFS("isp",		0, 0, 1, KHZ,	 217600,  217600,  307200,  307200,  371200,  435200,  499200,  550400,  614400,  678400,  742400,  742400,  793600,  793600,  793600),
+	CORE_DVFS("cbus",		0, 0, 1, KHZ,	 217600,  217600,  307200,  307200,  371200,  435200,  499200,  550400,  614400,  678400,  742400,  742400,  793600,  793600,  793600),
+
+	CORE_DVFS("abus",		0, 0, 1, KHZ,	 153600,  153600,  332800,  371200,  422400,  486400,  563200,  614400,  691200,  742400,  780800,  780800,  819200,  844800,  844800),
+	CORE_DVFS("aclk",		0, 0, 1, KHZ,	 153600,  153600,  332800,  371200,  422400,  486400,  563200,  614400,  691200,  742400,  780800,  780800,  819200,  844800,  844800),
+	CORE_DVFS("ape",		0, 0, 1, KHZ,	 140800,  140800,  230400,  268800,  307200,  345600,  384000,  448000,  486400,  499200,  499200,  499200,  499200,  499200,  499200),
+
+	CORE_DVFS("sbus",		0, 0, 1, KHZ,	 115200,  115200,  179200,  217600,  243200,  268800,  294400,  320000,  345600,  358400,  371200,  371200,  384000,  408000,  408000),
+	CORE_DVFS("sclk",		0, 0, 1, KHZ,	 115200,  115200,  179200,  217600,  243200,  268800,  294400,  320000,  345600,  358400,  371200,  371200,  384000,  408000,  408000),
+	CORE_DVFS("host1x",		0, 0, 1, KHZ,	  81600,   81600,  140800,  153600,  166400,  192000,  230400,  281600,  320000,  345600,  371200,  371200,  384000,  408000,  408000),
+	CORE_DVFS("tsec",		0, 0, 1, KHZ,	 217600,  217600,  384000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("mselect",		0, 0, 1, KHZ,	 204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+
+	CORE_DVFS("disp1",		0, 0, 0, KHZ,	 153600,  153600,  332800,  371200,  409600,  422400,  460800,  499200,  537600,  576000,  601600,  601600,  640000,  665600,  665600),
+	CORE_DVFS("disp2",		0, 0, 0, KHZ,	 153600,  153600,  332800,  371200,  409600,  422400,  460800,  499200,  537600,  576000,  601600,  601600,  640000,  665600,  665600),
+
+	/* Core voltages(mV):				    800,     825,     850,     875,     900,     925,     950,     975,    1000,    1025,    1050,    1062,    1075,    1100,    1125 */
+	CORE_DVFS("emc",		0, 1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1, 1200000, 1200000, 1200000, 1200000, 1200000, 1200000, 1200000),
+
+	CORE_DVFS("vic03",		0, 1, 1, KHZ,	 192000,  192000,  307200,  345600,  409600,  486400,  524800,  550400,  576000,  588800,  614400,  614400,  627200,  627200,  627200),
+	CORE_DVFS("nvjpg",		0, 1, 1, KHZ,	 192000,  192000,  307200,  345600,  409600,  486400,  524800,  550400,  576000,  588800,  614400,  614400,  627200,  627200,  627200),
+	CORE_DVFS("se",			0, 1, 1, KHZ,	 192000,  192000,  307200,  345600,  409600,  486400,  524800,  550400,  576000,  588800,  614400,  614400,  627200,  627200,  627200),
+	CORE_DVFS("tsecb",		0, 1, 1, KHZ,	 192000,  192000,  307200,  345600,  409600,  486400,  524800,  550400,  576000,  588800,  614400,  614400,  627200,  627200,  627200),
+	CORE_DVFS("c2bus",		0, 1, 1, KHZ,	 192000,  192000,  307200,  345600,  409600,  486400,  524800,  550400,  576000,  588800,  614400,  614400,  627200,  627200,  627200),
+
+	CORE_DVFS("nvenc",		0, 1, 1, KHZ,	 268800,  268800,  384000,  448000,  486400,  550400,  576000,  614400,  652800,  678400,  691200,  691200,  716800,  716800,  716800),
+	CORE_DVFS("nvdec",		0, 1, 1, KHZ,	 268800,  268800,  384000,  448000,  486400,  550400,  576000,  614400,  652800,  678400,  691200,  691200,  716800,  716800,  716800),
+	CORE_DVFS("c3bus",		0, 1, 1, KHZ,	 268800,  268800,  384000,  448000,  486400,  550400,  576000,  614400,  652800,  678400,  691200,  691200,  716800,  716800,  716800),
+
+	CORE_DVFS("vi",			0, 1, 1, KHZ,	 268800,  268800,  473600,  473600,  576000,  588800,  678400,  691200,  691200,  691200,  793600,  793600,  793600,  793600,  793600),
+	CORE_DVFS("isp",		0, 1, 1, KHZ,	 268800,  268800,  473600,  473600,  576000,  588800,  678400,  691200,  691200,  691200,  793600,  793600,  793600,  793600,  793600),
+	CORE_DVFS("cbus",		0, 1, 1, KHZ,	 268800,  268800,  473600,  473600,  576000,  588800,  678400,  691200,  691200,  691200,  793600,  793600,  793600,  793600,  793600),
+
+	CORE_DVFS("abus",		0, 1, 1, KHZ,	 230400,  230400,  422400,  460800,  524800,  601600,  652800,  704000,  755200,  819200,  844800,  844800,  844800,  844800,  844800),
+	CORE_DVFS("aclk",		0, 1, 1, KHZ,	 230400,  230400,  422400,  460800,  524800,  601600,  652800,  704000,  755200,  819200,  844800,  844800,  844800,  844800,  844800),
+	CORE_DVFS("ape",		0, 1, 1, KHZ,	 179200,  179200,  307200,  345600,  371200,  409600,  422400,  460800,  499200,  499200,  499200,  499200,  499200,  499200,  499200),
+
+	CORE_DVFS("sbus",		0, 1, 1, KHZ,	 140800,  140800,  230400,  256000,  281600,  307200,  332800,  358400,  371200,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("sclk",		0, 1, 1, KHZ,	 140800,  140800,  230400,  256000,  281600,  307200,  332800,  358400,  371200,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("host1x",		0, 1, 1, KHZ,	  81600,   81600,  153600,  179200,  192000,  217600,  345600,  358400,  384000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("tsec",		0, 1, 1, KHZ,	 268800,  268800,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("mselect",		0, 1, 1, KHZ,	 204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+
+	CORE_DVFS("disp1",		0, 1, 0, KHZ,	 243200,  243200,  422400,  460800,  499200,  524800,  563200,  576000,  601600,  640000,  665600,  665600,  665600,  665600,  665600),
+	CORE_DVFS("disp2",		0, 1, 0, KHZ,	 243200,  243200,  422400,  460800,  499200,  524800,  563200,  576000,  601600,  640000,  665600,  665600,  665600,  665600,  665600),
+
+	/* Core voltages(mV):				    800,     825,     850,     875,     900,     925,     950,     975,    1000,    1025,    1050,    1062,    1075,    1100,    1125 */
+	CORE_DVFS("emc",		0, 2, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1, 1200000, 1200000, 1200000, 1200000, 1200000, 1200000, 1200000),
+
+	CORE_DVFS("vic03",		0, 2, 1, KHZ,	 230400,  230400,  371200,  448000,  499200,  563200,  627200,  627200,  627200,  627200,  627200,  627200,  627200,  627200,  627200),
+	CORE_DVFS("nvjpg",		0, 2, 1, KHZ,	 230400,  230400,  371200,  448000,  499200,  563200,  627200,  627200,  627200,  627200,  627200,  627200,  627200,  627200,  627200),
+	CORE_DVFS("se",			0, 2, 1, KHZ,	 230400,  230400,  371200,  448000,  499200,  563200,  627200,  627200,  627200,  627200,  627200,  627200,  627200,  627200,  627200),
+	CORE_DVFS("tsecb",		0, 2, 1, KHZ,	 230400,  230400,  371200,  448000,  499200,  563200,  627200,  627200,  627200,  627200,  627200,  627200,  627200,  627200,  627200),
+	CORE_DVFS("c2bus",		0, 2, 1, KHZ,	 230400,  230400,  371200,  448000,  499200,  563200,  627200,  627200,  627200,  627200,  627200,  627200,  627200,  627200,  627200),
+
+	CORE_DVFS("nvenc",		0, 2, 1, KHZ,	 307200,  307200,  486400,  563200,  614400,  640000,  652800,  678400,  716800,  716800,  716800,  716800,  716800,  716800,  716800),
+	CORE_DVFS("nvdec",		0, 2, 1, KHZ,	 307200,  307200,  486400,  563200,  614400,  640000,  652800,  678400,  716800,  716800,  716800,  716800,  716800,  716800,  716800),
+	CORE_DVFS("c3bus",		0, 2, 1, KHZ,	 307200,  307200,  486400,  563200,  614400,  640000,  652800,  678400,  716800,  716800,  716800,  716800,  716800,  716800,  716800),
+
+	CORE_DVFS("vi",			0, 2, 1, KHZ,	 384000,  384000,  588800,  678400,  691200,  691200,  768000,  793600,  793600,  793600,  793600,  793600,  793600,  793600,  793600),
+	CORE_DVFS("isp",		0, 2, 1, KHZ,	 384000,  384000,  588800,  678400,  691200,  691200,  768000,  793600,  793600,  793600,  793600,  793600,  793600,  793600,  793600),
+	CORE_DVFS("cbus",		0, 2, 1, KHZ,	 384000,  384000,  588800,  678400,  691200,  691200,  768000,  793600,  793600,  793600,  793600,  793600,  793600,  793600,  793600),
+
+	CORE_DVFS("abus",		0, 2, 1, KHZ,	 281600,  281600,  499200,  576000,  652800,  691200,  755200,  793600,  844800,  844800,  844800,  844800,  844800,  844800,  844800),
+	CORE_DVFS("aclk",		0, 2, 1, KHZ,	 281600,  281600,  499200,  576000,  652800,  691200,  755200,  793600,  844800,  844800,  844800,  844800,  844800,  844800,  844800),
+	CORE_DVFS("ape",		0, 2, 1, KHZ,	 230400,  230400,  358400,  396800,  422400,  486400,  499200,  499200,  499200,  499200,  499200,  499200,  499200,  499200,  499200),
+
+	CORE_DVFS("sbus",		0, 2, 1, KHZ,	 204800,  204800,  307200,  332800,  371200,  384000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("sclk",		0, 2, 1, KHZ,	 204800,  204800,  307200,  332800,  371200,  384000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("host1x",		0, 2, 1, KHZ,	 128000,  128000,  217600,  345600,  384000,  384000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("tsec",		0, 2, 1, KHZ,	 345600,  345600,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("mselect",		0, 2, 1, KHZ,	 204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+
+	CORE_DVFS("disp1",		0, 2, 0, KHZ,	 345600,  345600,  486400,  524800,  563200,  576000,  627200,  640000,  665600,  665600,  665600,  665600,  665600,  665600,  665600),
+	CORE_DVFS("disp2",		0, 2, 0, KHZ,	 345600,  345600,  486400,  524800,  563200,  576000,  627200,  640000,  665600,  665600,  665600,  665600,  665600,  665600,  665600),
+
+/* Common Tables */
+	/* Core voltages(mV):				    800,     825,     850,     875,     900,     925,     950,     975,    1000,    1025,    1050,    1062,    1075,    1100,    1125 */
+	CORE_DVFS("pll_a",		-1, -1, 1, KHZ,	1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000),
+	CORE_DVFS("pll_c",		-1, -1, 1, KHZ,	1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000),
+	CORE_DVFS("pll_c2",		-1, -1, 1, KHZ,	1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000),
+	CORE_DVFS("pll_c3",		-1, -1, 1, KHZ,	1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000),
+	CORE_DVFS("pll_c4_out0",	-1, -1, 1, KHZ,	1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000),
+	CORE_DVFS("pll_d_out0",		-1, -1, 1, KHZ,	1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000),
+	CORE_DVFS("pll_d2",		-1, -1, 1, KHZ,	1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000),
+	CORE_DVFS("pll_dp",		-1, -1, 1, KHZ,	1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000, 1130000),
+
+	/* Core voltages(mV):				    800,     825,     850,     875,     900,     925,     950,     975,    1000,    1025,    1050,    1062,    1075,    1100,    1125 */
+	CORE_DVFS("csi",		-1, -1, 1, KHZ,	 750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000),
+	CORE_DVFS("cilab",		-1, -1, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+	CORE_DVFS("cilcd",		-1, -1, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+	CORE_DVFS("cile",		-1, -1, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+
+	CORE_DVFS("dsia",		-1, -1, 1, KHZ,	 500000,  500000,  500000,  500000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000),
+	CORE_DVFS("dsib",		-1, -1, 1, KHZ,	 500000,  500000,  500000,  500000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000),
+
+	CORE_DVFS("dsialp",		-1, -1, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+	CORE_DVFS("dsiblp",		-1, -1, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+
+	CORE_DVFS("sor0",		-1, -1, 1, KHZ,	 162000,  162000,  270000,  270000,  270000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000),
+	CORE_DVFS("sor1",		-1, -1, 1, KHZ,	 148500,  148500,  297000,  297000,  297000,  297000,  297000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000),
+
+	CORE_DVFS("i2s0",		-1, -1, 1, KHZ,	  24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576),
+	CORE_DVFS("i2s1",		-1, -1, 1, KHZ,	  24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576),
+	CORE_DVFS("i2s2",		-1, -1, 1, KHZ,	  24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576),
+	CORE_DVFS("i2s3",		-1, -1, 1, KHZ,	  24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576),
+	CORE_DVFS("i2s4",		-1, -1, 1, KHZ,	  24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576),
+
+	CORE_DVFS("d_audio",		-1, -1, 1, KHZ,	  49152,   49152,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304),
+	CORE_DVFS("spdif_out",		-1, -1, 1, KHZ,	  24576,   24576,   24576,   24576,   24576,   24576,   24728,   24728,   24728,   24728,   24728,   24728,   24728,   24728,   24728),
+	CORE_DVFS("dmic1",		-1, -1, 1, KHZ,	  12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288),
+	CORE_DVFS("dmic2",		-1, -1, 1, KHZ,	  12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288),
+	CORE_DVFS("dmic3",		-1, -1, 1, KHZ,	  12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288),
+
+	CORE_DVFS("hda",		-1, -1, 1, KHZ,	  51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000),
+	CORE_DVFS("hda2codec_2x",	-1, -1, 1, KHZ,	  48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000),
+
+	CORE_DVFS("sdmmc2",		-1, -1, 1, KHZ,	      1,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000),
+	CORE_DVFS("sdmmc4",		-1, -1, 1, KHZ,	      1,  200000,  266000,  266000,  266000,  266000,  266000,  266000,  266000,  266000,  266000,  266000,  266000,  266000,  266000),
+	CORE_DVFS("sdmmc2_ddr",		-1, -1, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+	CORE_DVFS("sdmmc4_ddr",		-1, -1, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+
+	CORE_DVFS("sdmmc1",		-1, -1, 1, KHZ,	 136000,  136000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000),
+	CORE_DVFS("sdmmc3",		-1, -1, 1, KHZ,	 136000,  136000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000),
+
+	CORE_DVFS("sdmmc1_ddr",		-1, -1, 1, KHZ,	  96000,   96000,   96000,   96000,   96000,   96000,   96000,   96000,   96000,   96000,   96000,   96000,   96000,   96000,   96000),
+	CORE_DVFS("sdmmc3_ddr",		-1, -1, 1, KHZ,	  96000,   96000,   96000,   96000,   96000,   96000,   96000,   96000,   96000,   96000,   96000,   96000,   96000,   96000,   96000),
+
+	CORE_DVFS("xusb_falcon_src",	-1, -1, 1, KHZ,	      1,       1,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000),
+	CORE_DVFS("xusb_host_src",	-1, -1, 1, KHZ,	      1,       1,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000),
+	CORE_DVFS("xusb_dev_src",	-1, -1, 1, KHZ,	      1,       1,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000),
+	CORE_DVFS("xusb_ssp_src",	-1, -1, 1, KHZ,	      1,       1,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000),
+	CORE_DVFS("xusb_fs_src",	-1, -1, 1, KHZ,	      1,       1,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000),
+	CORE_DVFS("xusb_hs_src",	-1, -1, 1, KHZ,	      1,       1,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000),
+	CORE_DVFS("usbd",		-1, -1, 1, KHZ,	 480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000),
+	CORE_DVFS("usb2",		-1, -1, 1, KHZ,	 480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000),
+
+	CORE_DVFS("sata",		-1, -1, 1, KHZ,	      1,       1,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+	CORE_DVFS("sata_oob",		-1, -1, 1, KHZ,	      1,       1,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000),
+	CORE_DVFS("pcie",		-1, -1, 1, KHZ,	      1,       1,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000),
+
+	CORE_DVFS("i2c1",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("i2c2",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("i2c3",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("i2c4",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("i2c5",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("i2c6",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("vii2c",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+
+	CORE_DVFS("pwm",		-1, -1, 1, KHZ,	  48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000),
+
+	CORE_DVFS("soc_therm",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("tsensor",		-1, -1, 1, KHZ,	  19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200),
+
+};
+
+static struct dvfs spi_dvfs_table[] = {
+	CORE_DVFS("sbc1",		-1, -1, 1, KHZ,	  12000,   35000,   50000,   50000,   65000,   65000,   65000,   65000,   65000,   65000,   65000,   65000,   65000,   65000,   65000),
+	CORE_DVFS("sbc2",		-1, -1, 1, KHZ,	  12000,   35000,   50000,   50000,   65000,   65000,   65000,   65000,   65000,   65000,   65000,   65000,   65000,   65000,   65000),
+	CORE_DVFS("sbc3",		-1, -1, 1, KHZ,	  12000,   35000,   50000,   50000,   65000,   65000,   65000,   65000,   65000,   65000,   65000,   65000,   65000,   65000,   65000),
+	CORE_DVFS("sbc4",		-1, -1, 1, KHZ,	  12000,   35000,   50000,   50000,   65000,   65000,   65000,   65000,   65000,   65000,   65000,   65000,   65000,   65000,   65000),
+};
+
+
+static struct dvfs spi_slave_dvfs_table[] = {
+	CORE_DVFS("sbc1",		-1, -1, 1, KHZ,	  45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000),
+	CORE_DVFS("sbc2",		-1, -1, 1, KHZ,	  45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000),
+	CORE_DVFS("sbc3",		-1, -1, 1, KHZ,	  45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000),
+	CORE_DVFS("sbc4",		-1, -1, 1, KHZ,	  45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000),
+
+};
+
+static struct dvfs qspi_sdr_dvfs_table[] = {
+	CORE_DVFS("qspi",		-1, -1, 1, KHZ,	  81600,   81600,  116600,  116600,  116600,  116600,  116600,  116600,  116600,  116600,  116600,  116600,  116600,  116600,  116600),
+};
+
+static struct dvfs qspi_ddr_dvfs_table[] = {
+	CORE_DVFS("qspi",		-1, -1, 1, KHZ,	  163200,   163200,   163200,   163200,   163200,   163200,   163200,   163200,   163200,   163200,   163200,   163200,   163200,   163200,   163200),
+};
+
+static struct dvfs sor1_dp_dvfs_table[] = {
+	CORE_DVFS("sor1",		-1, -1, 1, KHZ,	 162000,  162000,  270000,  270000,  270000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000),
+};
diff --git a/drivers/soc/tegra/tegra210-dvfs.c b/drivers/soc/tegra/tegra210-dvfs.c
index 1f3d664c53e0..ed9dfbacd0d9 100644
--- a/drivers/soc/tegra/tegra210-dvfs.c
+++ b/drivers/soc/tegra/tegra210-dvfs.c
@@ -991,8 +991,8 @@ static void init_dvfs_one(struct dvfs *d, int max_freq_index)
 	struct clk *c = clk_get_sys(d->clk_name, d->clk_name);
 
 	if (IS_ERR(c)) {
-		pr_info("tegra210_dvfs: no clock found for %s\n",
-			d->clk_name);
+		pr_info("tegra210_dvfs: no clock found for %s %ld\n",
+			d->clk_name, (signed long)c);
 		return;
 	}
 
@@ -1010,10 +1010,12 @@ static bool match_dvfs_one(const char *name, int dvfs_speedo_id,
 {
 	if ((dvfs_process_id != -1 && dvfs_process_id != process_id) ||
 		(dvfs_speedo_id != -1 && dvfs_speedo_id != speedo_id)) {
-		pr_debug("tegra210_dvfs: rejected %s speedo %d, process %d\n",
-			 name, dvfs_speedo_id, dvfs_process_id);
+		pr_err("tegra210_dvfs: rejected %s speedo %d, process %d - expected %d,%d\n",
+			 name, dvfs_speedo_id, dvfs_process_id, speedo_id, process_id);
 		return false;
 	}
+	pr_err("tegra210_dvfs: accepted %s speedo %d, process %d - expected %d,%d\n",
+			 name, dvfs_speedo_id, dvfs_process_id, speedo_id, process_id);
 	return true;
 }
 
@@ -1028,15 +1030,18 @@ static int set_cpu_dvfs_data(struct cpu_dvfs *d,
 	struct rail_alignment *align = tegra_dfll_get_alignment();
 	const char *version = tegra_dfll_get_cvb_version();
 	int speedo = tegra_sku_info.cpu_speedo_value;
-
+        pr_err("tegra210_dvfs: set_cpu_dvfs_data with %lx\n", d);
 	if (align == ERR_PTR(-EPROBE_DEFER))
+	{
+		pr_err("tegra210_dvfs: defer due to align defer\n");
 		return -EPROBE_DEFER;
+	}
 
 	vdd_cpu_rail.nvver = version;
 
 	min_dfll_mv = d->min_mv;
 	if (min_dfll_mv < vdd_cpu_rail.min_millivolts) {
-		pr_debug("tegra210_dvfs: dfll min %dmV below rail min %dmV\n",
+		pr_err("tegra210_dvfs: dfll min %dmV below rail min %dmV\n",
 			 min_dfll_mv, vdd_cpu_rail.min_millivolts);
 		min_dfll_mv = vdd_cpu_rail.min_millivolts;
 	}
@@ -1045,20 +1050,26 @@ static int set_cpu_dvfs_data(struct cpu_dvfs *d,
 
 	min_mv = d->pll_min_millivolts;
 	if (min_mv < vdd_cpu_rail.min_millivolts) {
-		pr_debug("tegra210_dvfs: pll min %dmV below rail min %dmV\n",
+		pr_err("tegra210_dvfs: pll min %dmV below rail min %dmV\n",
 			 min_mv, vdd_cpu_rail.min_millivolts);
 		min_mv = vdd_cpu_rail.min_millivolts;
 	}
 	min_mv = tegra_round_voltage(min_mv, align, true);
 
 	if (tegra_get_cpu_fv_table(&num_freqs, &freqs, &dfll_millivolts))
+	{
+		pr_err("tegra210_dvfs: defer due to tegra_get_cpu_fv_table\n");
 		return -EPROBE_DEFER;
+	}
+	
+	pr_err("tegra210_dvfs: freqs is %lx %lx\n", freqs, d->cvb_pll_table);
 
 	for (i = 0; i < num_freqs; i++) {
 		if (freqs[i] != d->cvb_pll_table[i].freq) {
-			pr_err("Err: DFLL freq ladder does not match PLL's\n");
+			pr_err("tegra210_dvfs: Err: DFLL freq ladder %d (%d) does not match PLL's (%d)\n", i, freqs[i], d->cvb_pll_table[i].freq);
 			return -EINVAL;
 		}
+		pr_err("tegra210_dvfs: NOTE: DFLL freq ladder %d (%d) match PLL's (%d)\n", i, freqs[i], d->cvb_pll_table[i].freq);
 
 		/*
 		 * Check maximum frequency at minimum voltage for dfll source;
@@ -1080,7 +1091,7 @@ static int set_cpu_dvfs_data(struct cpu_dvfs *d,
 		mv = tegra_round_cvb_voltage(mv, d->voltage_scale, align);
 		mv = max(mv, min_mv);
 		if ((mv > d->max_mv) && !i) {
-			pr_err("Err: volt of 1st entry is higher than Vmax\n");
+			pr_err("tegra210_dvfs: Err: volt of 1st entry is higher than Vmax\n");
 			return -EINVAL;
 		}
 
@@ -1109,7 +1120,7 @@ static int set_cpu_dvfs_data(struct cpu_dvfs *d,
 	*max_freq_index = i - 1;
 
 	cpu_dvfs->use_dfll_rate_min = fmin_use_dfll;
-
+        pr_err("tegra210_dvfs: success set_cpu_dvfs_data\n");
 	return 0;
 }
 
@@ -1138,6 +1149,7 @@ static int set_cpu_lp_dvfs_data(unsigned long max_freq, struct cpu_dvfs *d,
 	min_mv = tegra_round_voltage(min_mv, align, true);
 
 	d->max_mv = tegra_round_voltage(d->max_mv, align, false);
+	pr_err("tegra210_dvfs: Voltages are %d %d\n", d->max_mv, vdd_cpu_rail.max_millivolts);
 	BUG_ON(d->max_mv > vdd_cpu_rail.max_millivolts);
 	cpu_lp_dvfs->dvfs_rail->nominal_millivolts =
 		max(cpu_lp_dvfs->dvfs_rail->nominal_millivolts, d->max_mv);
@@ -1495,13 +1507,17 @@ static int init_cpu_dvfs_table(struct cpu_dvfs *fv_dvfs_table,
 
 	for (ret = 0, i = 0; i < table_size; i++) {
 		struct cpu_dvfs *d = &fv_dvfs_table[i];
+                pr_err("tegra210-dvfs: checking fv_dvfs_table[%d]\n", i);
 
 		if (match_dvfs_one("cpu dvfs", d->speedo_id, d->process_id,
 				   cpu_speedo_id, cpu_process_id)) {
 			ret = set_cpu_dvfs_data(
 				d, &cpu_dvfs, cpu_max_freq_index);
-			if (ret)
+			if (ret) {
+				printk(KERN_ERR "tegra210-dvfs: fail in set_cpu_dvfs_data %d %d\n", i, ret);
 				return ret;
+			}
+			pr_err("tegra210-dvfs: match fv_dvfs_table[%d]\n", i);
 			break;
 		}
 	}
@@ -1667,7 +1683,7 @@ static int of_parse_dvfs_rail_cdev_trips(struct device_node *node,
 		struct dvfs_therm_limits *therm_limits_ucm2_table,
 		struct rail_alignment *align, bool up)
 {
-	struct of_phandle_iter iter;
+	struct of_phandle_iterator iter;
 	int cells_num, i = 0, t;
 
 	/* 1 cell per trip-point, if constraint is specified */
@@ -2246,6 +2262,8 @@ static int tegra210x_init_dvfs(struct device *dev, bool cpu_lp_init)
 	int cpu_lp_max_freq_index = 0;
 	int gpu_max_freq_index = 0;
 	struct device_node *node = dev->of_node;
+	
+	dev_err(dev, "Try to init 210b01 dvfs with function\n");
 
 	tegra_dvfs_init_rails_lists(vdd_dvfs_rails, dvfs_data->rails_num);
 	init_core_dvfs_table(soc_speedo_id, core_process_id);
@@ -2258,7 +2276,7 @@ static int tegra210x_init_dvfs(struct device *dev, bool cpu_lp_init)
 
 		reg = regulator_get(dev, vdd_dvfs_rails[i]->reg_id);
 		if (IS_ERR(reg)) {
-			pr_info("tegra_dvfs: Unable to get %s rail for step info, defering probe\n",
+			pr_err("tegra_dvfs: Unable to get %s rail for step info, defering probe\n",
 					vdd_dvfs_rails[i]->reg_id);
 			return -EPROBE_DEFER;
 		}
@@ -2288,13 +2306,18 @@ static int tegra210x_init_dvfs(struct device *dev, bool cpu_lp_init)
 	 */
 	ret = init_cpu_dvfs_table(dvfs_data->cpu_fv_table,
 		dvfs_data->cpu_fv_table_size, &cpu_max_freq_index);
-	if (ret)
+	if (ret) {
+		pr_err("tegra_dvfs: Failed to init_cpu_dvfs_table: %d\n", ret);
 		goto out;
+	}
 
 	if (cpu_lp_init) {
 		ret = init_cpu_lp_dvfs_table(&cpu_lp_max_freq_index);
 		if (ret)
+		{
+			pr_err("tegra_dvfs: Failed to init_cpu_lp_dvfs_table: %d\n", ret);
 			goto out;
+		}
 	}
 
 	/*
@@ -2329,7 +2352,7 @@ static int tegra210x_init_dvfs(struct device *dev, bool cpu_lp_init)
 
 	for (i = 0; i < dvfs_data->rails_num; i++) {
 		struct dvfs_rail *rail = vdd_dvfs_rails[i];
-		pr_info("tegra dvfs: %s: nominal %dmV, offset %duV, step %duV, scaling %s\n",
+		pr_err("tegra dvfs: %s: nominal %dmV, offset %duV, step %duV, scaling %s\n",
 			rail->reg_id, rail->nominal_millivolts,
 			rail->alignment.offset_uv, rail->alignment.step_uv,
 			rail->disabled ? "disabled" : "enabled");
@@ -2347,12 +2370,19 @@ int tegra210_init_dvfs(struct device *dev)
 
 int tegra210b01_init_dvfs(struct device *dev)
 {
+	dev_err(dev, "Try to init 210b01 dvfs\n");
 	update_emc_override_dvb_dvfs(&tegra210b01_dvfs_data);
 
 	if (tegra_sku_info.soc_speedo_id == 2)
+	{
+	        dev_err(dev, "Init with tegra210b01slt_dvfs_data\n");
 		init_dvfs_data(&tegra210b01slt_dvfs_data);
+	}
 	else
+	{
+	        dev_err(dev, "Init with tegra210b01_dvfs_data\n");
 		init_dvfs_data(&tegra210b01_dvfs_data);
+	}
 
 	return tegra210x_init_dvfs(dev, false);
 }
diff --git a/drivers/soc/tegra/tegra210b01-core-dvfs.c b/drivers/soc/tegra/tegra210b01-core-dvfs.c
new file mode 100644
index 000000000000..5d6c2741a2c8
--- /dev/null
+++ b/drivers/soc/tegra/tegra210b01-core-dvfs.c
@@ -0,0 +1,260 @@
+/*
+ * Copyright (c) 2017, NVIDIA CORPORATION.  All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+static const int coreb01_voltages_mv[MAX_DVFS_FREQS] = {
+	637, 650, 675, 700, 725, 750, 775, 800, 825, 850, 875, 900, 925, 950, 975, 1000, 1025, 1050
+};
+
+static struct dvfs coreb01_dvfs_table[] = {
+/* Per-bin Tables */
+	/* Core voltages(mV):				    637,     650,     675,     700,     725,     750,     775,     800,     825,     850,     875,     900,     925,     950,     975,    1000,    1025,    1050 */
+	CORE_DVFS("emc",		0, 0, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000),
+
+	CORE_DVFS("vic03",		0, 0, 1, KHZ,	 307200,  364800,  441600,  499200,  518400,  537600,  556800,  576000,  576000,  595200,  614400,  614400,  633600,  633600,  652800,  652800,  652800,  652800),
+	CORE_DVFS("nvjpg",		0, 0, 1, KHZ,	 307200,  364800,  441600,  499200,  518400,  537600,  556800,  576000,  576000,  595200,  614400,  614400,  633600,  633600,  652800,  652800,  652800,  652800),
+	CORE_DVFS("se",			0, 0, 1, KHZ,	 307200,  364800,  441600,  499200,  518400,  537600,  556800,  576000,  576000,  595200,  614400,  614400,  633600,  633600,  652800,  652800,  652800,  652800),
+	CORE_DVFS("tsecb",		0, 0, 1, KHZ,	 307200,  364800,  441600,  499200,  518400,  537600,  556800,  576000,  576000,  595200,  614400,  614400,  633600,  633600,  652800,  652800,  652800,  652800),
+	CORE_DVFS("c2bus",		0, 0, 1, KHZ,	 307200,  364800,  441600,  499200,  518400,  537600,  556800,  576000,  576000,  595200,  614400,  614400,  633600,  633600,  652800,  652800,  652800,  652800),
+
+	CORE_DVFS("nvenc",		0, 0, 1, KHZ,	 364800,  403200,  499200,  576000,  595200,  672000,  710400,  748800,  787200,  825600,  844800,  864000,  883200,  902400,  921600,  940800,  960000,  979200),
+	CORE_DVFS("nvdec",		0, 0, 1, KHZ,	 364800,  403200,  499200,  576000,  595200,  672000,  710400,  748800,  787200,  825600,  844800,  864000,  883200,  902400,  921600,  940800,  960000,  979200),
+	CORE_DVFS("c3bus",		0, 0, 1, KHZ,	 364800,  403200,  499200,  576000,  595200,  672000,  710400,  748800,  787200,  825600,  844800,  864000,  883200,  902400,  921600,  940800,  960000,  979200),
+
+	CORE_DVFS("vi",			0, 0, 1, KHZ,	 422400,  422400,  556800,  595200,  652800,  691200,  729600,  787200,  825600,  864000,  902400,  940800,  960000,  998400, 1036800, 1056000, 1094400, 1113600),
+	CORE_DVFS("cbus",		0, 0, 1, KHZ,	 422400,  422400,  556800,  595200,  652800,  691200,  729600,  787200,  825600,  864000,  902400,  940800,  960000,  998400, 1036800, 1056000, 1094400, 1113600),
+
+	CORE_DVFS("abus",		0, 0, 1, KHZ,	 576000,  691200,  729600,  768000,  844800,  921600,  998400, 1036800, 1113600, 1152000, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400),
+	CORE_DVFS("aclk",		0, 0, 1, KHZ,	 576000,  691200,  729600,  768000,  844800,  921600,  998400, 1036800, 1113600, 1152000, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400),
+
+	CORE_DVFS("ape",		0, 0, 1, KHZ,	 422400,  480000,  499200,  595200,  633600,  652800,  691200,  729600,  768000,  806400,  844800,  883200,  940800,  979200,  998400,  998400,  998400,  998400),
+	CORE_DVFS("sbus",		0, 0, 1, KHZ,	 102000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("sclk",		0, 0, 1, KHZ,	 102000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+
+	CORE_DVFS("host1x",		0, 0, 1, KHZ,	 102000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("tsec",		0, 0, 1, KHZ,	 307200,  364800,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("mselect",		0, 0, 1, KHZ,	 102000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+
+	CORE_DVFS("disp1",		0, 0, 0, KHZ,	 300000,  350000,  450000,  500000,  525000,  550000,  600000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000),
+	CORE_DVFS("disp2",		0, 0, 0, KHZ,	 300000,  350000,  450000,  500000,  525000,  550000,  600000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000),
+
+
+	CORE_DVFS("sor1",		0, 0, 1, KHZ,	      1,       1,  297000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000),
+	CORE_DVFS("hda",		0, 0, 1, KHZ,	      1,       1,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+	CORE_DVFS("hda2codec_2x",	0, 0, 1, KHZ,	      1,       1,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000),
+	CORE_DVFS("maud",		0, 0, 1, KHZ,	      1,       1,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+
+	/* Core voltages(mV):				    637,     650,     675,     700,     725,     750,     775,     800,     825,     850,     875,     900,     925,     950,     975,    1000,    1025,    1050 */
+	CORE_DVFS("emc",		0, 1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000),
+
+	CORE_DVFS("vic03",		0, 1, 1, KHZ,	 422400,  441600,  499200,  518400,  537600,  556800,  576000,  576000,  595200,  614400,  633600,  633600,  652800,  652800,  652800,  652800,  652800,  652800),
+	CORE_DVFS("nvjpg",		0, 1, 1, KHZ,	 422400,  441600,  499200,  518400,  537600,  556800,  576000,  576000,  595200,  614400,  633600,  633600,  652800,  652800,  652800,  652800,  652800,  652800),
+	CORE_DVFS("se",			0, 1, 1, KHZ,	 422400,  441600,  499200,  518400,  537600,  556800,  576000,  576000,  595200,  614400,  633600,  633600,  652800,  652800,  652800,  652800,  652800,  652800),
+	CORE_DVFS("tsecb",		0, 1, 1, KHZ,	 422400,  441600,  499200,  518400,  537600,  556800,  576000,  576000,  595200,  614400,  633600,  633600,  652800,  652800,  652800,  652800,  652800,  652800),
+	CORE_DVFS("c2bus",		0, 1, 1, KHZ,	 422400,  441600,  499200,  518400,  537600,  556800,  576000,  576000,  595200,  614400,  633600,  633600,  652800,  652800,  652800,  652800,  652800,  652800),
+
+	CORE_DVFS("nvenc",		0, 1, 1, KHZ,	 460800,  499200,  556800,  633600,  652800,  710400,  748800,  787200,  825600,  844800,  883200,  902400,  921600,  940800,  960000,  979200,  979200,  979200),
+	CORE_DVFS("nvdec",		0, 1, 1, KHZ,	 460800,  499200,  556800,  633600,  652800,  710400,  748800,  787200,  825600,  844800,  883200,  902400,  921600,  940800,  960000,  979200,  979200,  979200),
+	CORE_DVFS("c3bus",		0, 1, 1, KHZ,	 460800,  499200,  556800,  633600,  652800,  710400,  748800,  787200,  825600,  844800,  883200,  902400,  921600,  940800,  960000,  979200,  979200,  979200),
+
+	CORE_DVFS("vi",			0, 1, 1, KHZ,	 460800,  499200,  614400,  672000,  729600,  787200,  825600,  864000,  902400,  940800,  979200, 1017600, 1036800, 1056000, 1094400, 1113600, 1113600, 1113600),
+	CORE_DVFS("cbus",		0, 1, 1, KHZ,	 460800,  499200,  614400,  672000,  729600,  787200,  825600,  864000,  902400,  940800,  979200, 1017600, 1036800, 1056000, 1094400, 1113600, 1113600, 1113600),
+
+	CORE_DVFS("abus",		0, 1, 1, KHZ,	 691200,  768000,  806400,  883200,  921600,  960000, 1075200, 1113600, 1152000, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400),
+	CORE_DVFS("aclk",		0, 1, 1, KHZ,	 691200,  768000,  806400,  883200,  921600,  960000, 1075200, 1113600, 1152000, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400),
+
+	CORE_DVFS("ape",		0, 1, 1, KHZ,	 441600,  499200,  537600,  633600,  672000,  691200,  729600,  787200,  806400,  844800,  883200,  921600,  979200,  998400,  998400,  998400,  998400,  998400),
+	CORE_DVFS("sbus",		0, 1, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("sclk",		0, 1, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+
+	CORE_DVFS("host1x",		0, 1, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("tsec",		0, 1, 1, KHZ,	 408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("mselect",		0, 1, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+
+	CORE_DVFS("disp1",		0, 1, 0, KHZ,	 400000,  500000,  535000,  600000,  635000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000),
+	CORE_DVFS("disp2",		0, 1, 0, KHZ,	 400000,  500000,  535000,  600000,  635000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000),
+
+
+	CORE_DVFS("sor1",		0, 1, 1, KHZ,	 297000,  297000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000),
+	CORE_DVFS("hda",		0, 1, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+	CORE_DVFS("hda2codec_2x",	0, 1, 1, KHZ,	  48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000),
+	CORE_DVFS("maud",		0, 1, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+
+	/* Core voltages(mV):				    637,     650,     675,     700,     725,     750,     775,     800,     825,     850,     875,     900,     925,     950,     975,    1000,    1025,    1050 */
+	CORE_DVFS("emc",		0, 2, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000),
+
+	CORE_DVFS("vic03",		0, 2, 1, KHZ,	 499200,  499200,  537600,  556800,  576000,  595200,  614400,  614400,  633600,  652800,  652800,  652800,  652800,  652800,  652800,  652800,  652800,  652800),
+	CORE_DVFS("nvjpg",		0, 2, 1, KHZ,	 499200,  499200,  537600,  556800,  576000,  595200,  614400,  614400,  633600,  652800,  652800,  652800,  652800,  652800,  652800,  652800,  652800,  652800),
+	CORE_DVFS("se",			0, 2, 1, KHZ,	 499200,  499200,  537600,  556800,  576000,  595200,  614400,  614400,  633600,  652800,  652800,  652800,  652800,  652800,  652800,  652800,  652800,  652800),
+	CORE_DVFS("tsecb",		0, 2, 1, KHZ,	 499200,  499200,  537600,  556800,  576000,  595200,  614400,  614400,  633600,  652800,  652800,  652800,  652800,  652800,  652800,  652800,  652800,  652800),
+	CORE_DVFS("c2bus",		0, 2, 1, KHZ,	 499200,  499200,  537600,  556800,  576000,  595200,  614400,  614400,  633600,  652800,  652800,  652800,  652800,  652800,  652800,  652800,  652800,  652800),
+
+	CORE_DVFS("nvenc",		0, 2, 1, KHZ,	 556800,  595200,  652800,  691200,  748800,  787200,  825600,  844800,  864000,  883200,  921600,  940800,  940800,  960000,  979200,  979200,  979200,  979200),
+	CORE_DVFS("nvdec",		0, 2, 1, KHZ,	 556800,  595200,  652800,  691200,  748800,  787200,  825600,  844800,  864000,  883200,  921600,  940800,  940800,  960000,  979200,  979200,  979200,  979200),
+	CORE_DVFS("c3bus",		0, 2, 1, KHZ,	 556800,  595200,  652800,  691200,  748800,  787200,  825600,  844800,  864000,  883200,  921600,  940800,  940800,  960000,  979200,  979200,  979200,  979200),
+
+	CORE_DVFS("vi",			0, 2, 1, KHZ,	 576000,  614400,  652800,  691200,  768000,  806400,  844800,  883200,  921600,  960000,  998400, 1036800, 1075200, 1094400, 1113600, 1113600, 1113600, 1113600),
+	CORE_DVFS("cbus",		0, 2, 1, KHZ,	 576000,  614400,  652800,  691200,  768000,  806400,  844800,  883200,  921600,  960000,  998400, 1036800, 1075200, 1094400, 1113600, 1113600, 1113600, 1113600),
+
+	CORE_DVFS("abus",		0, 2, 1, KHZ,	 768000,  844800,  921600,  960000,  998400, 1075200, 1113600, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400),
+	CORE_DVFS("aclk",		0, 2, 1, KHZ,	 768000,  844800,  921600,  960000,  998400, 1075200, 1113600, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400),
+
+	CORE_DVFS("ape",		0, 2, 1, KHZ,	 576000,  595200,  652800,  710400,  729600,  806400,  844800,  883200,  921600,  960000,  998400,  998400,  998400,  998400,  998400,  998400,  998400,  998400),
+	CORE_DVFS("sbus",		0, 2, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("sclk",		0, 2, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+
+	CORE_DVFS("host1x",		0, 2, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("tsec",		0, 2, 1, KHZ,	 408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("mselect",		0, 2, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+
+	CORE_DVFS("disp1",		0, 2, 0, KHZ,	 450000,  500000,  550000,  600000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000),
+	CORE_DVFS("disp2",		0, 2, 0, KHZ,	 450000,  500000,  550000,  600000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000),
+
+
+	CORE_DVFS("sor1",		0, 2, 1, KHZ,	 297000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000),
+	CORE_DVFS("hda",		0, 2, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+	CORE_DVFS("hda2codec_2x",	0, 2, 1, KHZ,	  48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000),
+	CORE_DVFS("maud",		0, 2, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+
+/* Common Tables */
+	/* Core voltages(mV):				    637,     650,     675,     700,     725,     750,     775,     800,     825,     850,     875,     900,     925,     950,     975,    1000,    1025,    1050 */
+	CORE_DVFS("pll_a",		-1, -1, 1, KHZ,	1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000),
+	CORE_DVFS("pll_c",		-1, -1, 1, KHZ,	1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000),
+	CORE_DVFS("pll_c2",		-1, -1, 1, KHZ,	1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000),
+	CORE_DVFS("pll_c3",		-1, -1, 1, KHZ,	1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000),
+	CORE_DVFS("pll_c4_out0",	-1, -1, 1, KHZ,	1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000),
+	CORE_DVFS("pll_d_out0",		-1, -1, 1, KHZ,	1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000),
+	CORE_DVFS("pll_d2",		-1, -1, 1, KHZ,	1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000),
+	CORE_DVFS("pll_dp",		-1, -1, 1, KHZ,	1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000),
+
+	/* Core voltages(mV):				    637,     650,     675,     700,     725,     750,     775,     800,     825,     850,     875,     900,     925,     950,     975,    1000,    1025,    1050 */
+	CORE_DVFS("csi",		-1, -1, 1, KHZ,	 750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000),
+	CORE_DVFS("cilab",		-1, -1, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  204000,  204000,  204000,  204000,  204000,  204000,  204000),
+	CORE_DVFS("cilcd",		-1, -1, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  204000,  204000,  204000,  204000,  204000,  204000,  204000),
+
+	CORE_DVFS("clk72mhz",		-1, -1, 1, KHZ,	  68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000),
+	CORE_DVFS("dsia",		-1, -1, 1, KHZ,	 750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000),
+	CORE_DVFS("dsib",		-1, -1, 1, KHZ,	 750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000),
+
+	CORE_DVFS("dsialp",		-1, -1, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+	CORE_DVFS("dsiblp",		-1, -1, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+
+
+
+	CORE_DVFS("i2s0",		-1, -1, 1, KHZ,	  24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576),
+	CORE_DVFS("i2s1",		-1, -1, 1, KHZ,	  24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576),
+	CORE_DVFS("i2s2",		-1, -1, 1, KHZ,	  24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576),
+	CORE_DVFS("i2s3",		-1, -1, 1, KHZ,	  24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576),
+	CORE_DVFS("i2s4",		-1, -1, 1, KHZ,	  24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576),
+
+	CORE_DVFS("d_audio",		-1, -1, 1, KHZ,	  98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304),
+	CORE_DVFS("spdif_in",		-1, -1, 1, KHZ,	 163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200),
+	CORE_DVFS("spdif_out",		-1, -1, 1, KHZ,	  24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576),
+	CORE_DVFS("dmic1",		-1, -1, 1, KHZ,	  12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288),
+	CORE_DVFS("dmic2",		-1, -1, 1, KHZ,	  12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288),
+	CORE_DVFS("dmic3",		-1, -1, 1, KHZ,	  12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288),
+
+
+
+
+	CORE_DVFS("sdmmc1",		-1, -1, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000),
+	CORE_DVFS("sdmmc3",		-1, -1, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000),
+
+	CORE_DVFS("sdmmc1_ddr",		-1, -1, 1, KHZ,	  50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000),
+	CORE_DVFS("sdmmc3_ddr",		-1, -1, 1, KHZ,	  50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000),
+
+	CORE_DVFS("sdmmc2",		-1, -1, 1, KHZ,	 200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000),
+	CORE_DVFS("sdmmc4",		-1, -1, 1, KHZ,	 200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000),
+
+	CORE_DVFS("sdmmc_legacy",	-1, -1, 1, KHZ,	  12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000),
+
+	CORE_DVFS("xusb_falcon_src",	-1, -1, 1, KHZ,	 336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000),
+	CORE_DVFS("xusb_host_src",	-1, -1, 1, KHZ,	 112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000),
+	CORE_DVFS("xusb_dev_src",	-1, -1, 1, KHZ,	 112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000),
+	CORE_DVFS("xusb_ssp_src",	-1, -1, 1, KHZ,	 120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000),
+	CORE_DVFS("xusb_fs_src",	-1, -1, 1, KHZ,	  48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000),
+	CORE_DVFS("xusb_hs_src",	-1, -1, 1, KHZ,	 480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000),
+	CORE_DVFS("usbd",		-1, -1, 1, KHZ,	 480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000),
+	CORE_DVFS("usb2",		-1, -1, 1, KHZ,	 480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000),
+
+	CORE_DVFS("pcie",		-1, -1, 1, KHZ,	 500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000),
+
+	CORE_DVFS("i2c1",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("i2c2",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("i2c3",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("i2c4",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("i2c5",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("i2c6",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("vii2c",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+
+	CORE_DVFS("i2cslow",		-1, -1, 1, KHZ,	     33,      33,      33,      33,      33,      33,      33,      33,      33,      33,      33,      33,      33,      33,      33,      33,      33,      33),
+	CORE_DVFS("pwm",		-1, -1, 1, KHZ,	  48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000),
+
+	CORE_DVFS("extern1",		-1, -1, 1, KHZ,	  49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152),
+	CORE_DVFS("extern2",		-1, -1, 1, KHZ,	  49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152),
+	CORE_DVFS("extern3",		-1, -1, 1, KHZ,	  49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152),
+
+	CORE_DVFS("soc_therm",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("tsensor",		-1, -1, 1, KHZ,	  19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200),
+};
+
+static struct dvfs sor1_dpb01_dvfs_table[] = {
+	CORE_DVFS("sor1",		0, 0, 1, KHZ,	      1,       1,  270000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000),
+	CORE_DVFS("sor1",		0, 1, 1, KHZ,	 270000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000),
+	CORE_DVFS("sor1",		0, 2, 1, KHZ,	 540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000),
+};
+
+static struct dvfs spib01_dvfs_table[] = {
+	CORE_DVFS("sbc1",		-1, -1, 1, KHZ,	  51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000),
+	CORE_DVFS("sbc2",		-1, -1, 1, KHZ,	  51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000),
+	CORE_DVFS("sbc3",		-1, -1, 1, KHZ,	  51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000),
+	CORE_DVFS("sbc4",		-1, -1, 1, KHZ,	  51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000),
+
+};
+
+static struct dvfs spi_slaveb01_dvfs_table[] = {
+	CORE_DVFS("sbc1",		-1, -1, 1, KHZ,	  45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000),
+	CORE_DVFS("sbc2",		-1, -1, 1, KHZ,	  45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000),
+	CORE_DVFS("sbc3",		-1, -1, 1, KHZ,	  45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000),
+	CORE_DVFS("sbc4",		-1, -1, 1, KHZ,	  45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000),
+
+};
+
+static struct dvfs qspi_sdrb01_dvfs_table[] = {
+	CORE_DVFS("qspi",		-1, -1, 1, KHZ,	 133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000),
+};
+
+static struct dvfs qspi_ddrb01_dvfs_table[] = {
+	CORE_DVFS("qspi",		-1, -1, 1, KHZ,	 200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000),
+};
+
+/* EMC DVB DVFS tables */
+static struct dvb_dvfs emcb01_dvb_dvfs_table[] = {
+	{
+		.speedo_id = -1,
+		.freqs_mult = KHZ,
+		.dvb_table = {
+			{  204000, {  637,  637,  637, } },
+			{  408000, {  637,  637,  637, } },
+			{  800000, {  637,  637,  637, } },
+			{ 1065600, {  637,  637,  637, } },
+			{ 1331200, {  650,  637,  637, } },
+			{ 1600000, {  675,  650,  637, } },
+			{ 0, { } },
+		},
+	},
+};
+
+static const char coreb01_dvfs_table_ver[] = "SOC - p4v3 SOC_IO - p4v4 SOC_EMC- p4v3";
diff --git a/drivers/soc/tegra/tegra210b01-slt-core-dvfs.c b/drivers/soc/tegra/tegra210b01-slt-core-dvfs.c
new file mode 100644
index 000000000000..c64961830d02
--- /dev/null
+++ b/drivers/soc/tegra/tegra210b01-slt-core-dvfs.c
@@ -0,0 +1,260 @@
+/*
+ * Copyright (c) 2017, NVIDIA CORPORATION.  All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+static const int coreb01slt_voltages_mv[MAX_DVFS_FREQS] = {
+	600, 625, 650, 675, 700, 725, 750, 775, 800, 825, 850, 875, 900, 925, 950, 975, 1000, 1025, 1050
+};
+
+static struct dvfs coreb01slt_dvfs_table[] = {
+/* Per-bin Tables */
+	/* Core voltages(mV):				    600,     625,     650,     675,     700,     725,     750,     775,     800,     825,     850,     875,     900,     925,     950,     975,    1000,    1025,    1050 */
+	CORE_DVFS("emc",		2, 0, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000),
+
+	CORE_DVFS("vic03",		2, 0, 1, KHZ,	 326400,  384000,  422400,  460800,  518400,  537600,  556800,  576000,  595200,  595200,  614400,  614400,  633600,  633600,  633600,  672000,  672000,  672000,  672000),
+	CORE_DVFS("nvjpg",		2, 0, 1, KHZ,	 326400,  384000,  422400,  460800,  518400,  537600,  556800,  576000,  595200,  595200,  614400,  614400,  633600,  633600,  633600,  672000,  672000,  672000,  672000),
+	CORE_DVFS("se",			2, 0, 1, KHZ,	 326400,  384000,  422400,  460800,  518400,  537600,  556800,  576000,  595200,  595200,  614400,  614400,  633600,  633600,  633600,  672000,  672000,  672000,  672000),
+	CORE_DVFS("tsecb",		2, 0, 1, KHZ,	 326400,  384000,  422400,  460800,  518400,  537600,  556800,  576000,  595200,  595200,  614400,  614400,  633600,  633600,  633600,  672000,  672000,  672000,  672000),
+	CORE_DVFS("c2bus",		2, 0, 1, KHZ,	 326400,  384000,  422400,  460800,  518400,  537600,  556800,  576000,  595200,  595200,  614400,  614400,  633600,  633600,  633600,  672000,  672000,  672000,  672000),
+
+	CORE_DVFS("nvenc",		2, 0, 1, KHZ,	 403200,  422400,  460800,  556800,  595200,  652800,  691200,  729600,  768000,  806400,  844800,  864000,  883200,  902400,  921600,  940800,  960000,  979200,  998400),
+	CORE_DVFS("nvdec",		2, 0, 1, KHZ,	 403200,  422400,  460800,  556800,  595200,  652800,  691200,  729600,  768000,  806400,  844800,  864000,  883200,  902400,  921600,  940800,  960000,  979200,  998400),
+	CORE_DVFS("c3bus",		2, 0, 1, KHZ,	 403200,  422400,  460800,  556800,  595200,  652800,  691200,  729600,  768000,  806400,  844800,  864000,  883200,  902400,  921600,  940800,  960000,  979200,  998400),
+
+	CORE_DVFS("vi",			2, 0, 1, KHZ,	 422400,  480000,  480000,  576000,  595200,  672000,  691200,  729600,  787200,  825600,  864000,  902400,  940800,  979200, 1017600, 1056000, 1075200, 1113600, 1132800),
+	CORE_DVFS("cbus",		2, 0, 1, KHZ,	 422400,  480000,  480000,  576000,  595200,  672000,  691200,  729600,  787200,  825600,  864000,  902400,  940800,  979200, 1017600, 1056000, 1075200, 1113600, 1132800),
+
+	CORE_DVFS("abus",		2, 0, 1, KHZ,	 537600,  614400,  729600,  768000,  806400,  883200,  960000, 1017600, 1075200, 1132800, 1152000, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400),
+	CORE_DVFS("aclk",		2, 0, 1, KHZ,	 537600,  614400,  729600,  768000,  806400,  883200,  960000, 1017600, 1075200, 1132800, 1152000, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400),
+
+	CORE_DVFS("ape",		2, 0, 1, KHZ,	 422400,  480000,  499200,  556800,  614400,  652800,  710400,  748800,  787200,  825600,  864000,  902400,  940800,  960000,  998400,  998400,  998400,  998400,  998400),
+	CORE_DVFS("sbus",		2, 0, 1, KHZ,	 102000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("sclk",		2, 0, 1, KHZ,	 102000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+
+	CORE_DVFS("host1x",		2, 0, 1, KHZ,	 102000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("tsec",		2, 0, 1, KHZ,	 326400,  384000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("mselect",		2, 0, 1, KHZ,	 102000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+
+	CORE_DVFS("disp1",		2, 0, 0, KHZ,	      1,  300000,  400000,  450000,  500000,  550000,  600000,  640000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000),
+	CORE_DVFS("disp2",		2, 0, 0, KHZ,	      1,  300000,  400000,  450000,  500000,  550000,  600000,  640000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000),
+
+
+	CORE_DVFS("sor1",		2, 0, 1, KHZ,	      1,       1,       1,  297000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000),
+	CORE_DVFS("hda",		2, 0, 1, KHZ,	      1,       1,       1,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+	CORE_DVFS("hda2codec_2x",	2, 0, 1, KHZ,	      1,       1,       1,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000),
+	CORE_DVFS("maud",		2, 0, 1, KHZ,	      1,       1,       1,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+
+	/* Core voltages(mV):				    600,     625,     650,     675,     700,     725,     750,     775,     800,     825,     850,     875,     900,     925,     950,     975,    1000,    1025,    1050 */
+	CORE_DVFS("emc",		2, 1, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000),
+
+	CORE_DVFS("vic03",		2, 1, 1, KHZ,	 403200,  441600,  460800,  518400,  537600,  556800,  576000,  595200,  595200,  614400,  633600,  633600,  652800,  652800,  652800,  672000,  672000,  672000,  672000),
+	CORE_DVFS("nvjpg",		2, 1, 1, KHZ,	 403200,  441600,  460800,  518400,  537600,  556800,  576000,  595200,  595200,  614400,  633600,  633600,  652800,  652800,  652800,  672000,  672000,  672000,  672000),
+	CORE_DVFS("se",			2, 1, 1, KHZ,	 403200,  441600,  460800,  518400,  537600,  556800,  576000,  595200,  595200,  614400,  633600,  633600,  652800,  652800,  652800,  672000,  672000,  672000,  672000),
+	CORE_DVFS("tsecb",		2, 1, 1, KHZ,	 403200,  441600,  460800,  518400,  537600,  556800,  576000,  595200,  595200,  614400,  633600,  633600,  652800,  652800,  652800,  672000,  672000,  672000,  672000),
+	CORE_DVFS("c2bus",		2, 1, 1, KHZ,	 403200,  441600,  460800,  518400,  537600,  556800,  576000,  595200,  595200,  614400,  633600,  633600,  652800,  652800,  652800,  672000,  672000,  672000,  672000),
+
+	CORE_DVFS("nvenc",		2, 1, 1, KHZ,	 480000,  518400,  556800,  614400,  652800,  710400,  729600,  768000,  806400,  844800,  864000,  902400,  921600,  940800,  960000,  979200,  998400,  998400,  998400),
+	CORE_DVFS("nvdec",		2, 1, 1, KHZ,	 480000,  518400,  556800,  614400,  652800,  710400,  729600,  768000,  806400,  844800,  864000,  902400,  921600,  940800,  960000,  979200,  998400,  998400,  998400),
+	CORE_DVFS("c3bus",		2, 1, 1, KHZ,	 480000,  518400,  556800,  614400,  652800,  710400,  729600,  768000,  806400,  844800,  864000,  902400,  921600,  940800,  960000,  979200,  998400,  998400,  998400),
+
+	CORE_DVFS("vi",			2, 1, 1, KHZ,	 480000,  518400,  556800,  633600,  672000,  748800,  787200,  825600,  864000,  902400,  940800,  979200, 1017600, 1056000, 1075200, 1113600, 1132800, 1132800, 1132800),
+	CORE_DVFS("cbus",		2, 1, 1, KHZ,	 480000,  518400,  556800,  633600,  672000,  748800,  787200,  825600,  864000,  902400,  940800,  979200, 1017600, 1056000, 1075200, 1113600, 1132800, 1132800, 1132800),
+
+	CORE_DVFS("abus",		2, 1, 1, KHZ,	 652800,  729600,  806400,  844800,  921600,  960000,  998400, 1094400, 1152000, 1171200, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400),
+	CORE_DVFS("aclk",		2, 1, 1, KHZ,	 652800,  729600,  806400,  844800,  921600,  960000,  998400, 1094400, 1152000, 1171200, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400),
+
+	CORE_DVFS("ape",		2, 1, 1, KHZ,	 460800,  499200,  499200,  595200,  652800,  691200,  748800,  787200,  844800,  864000,  902400,  940800,  979200,  998400,  998400,  998400,  998400,  998400,  998400),
+	CORE_DVFS("sbus",		2, 1, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("sclk",		2, 1, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+
+	CORE_DVFS("host1x",		2, 1, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("tsec",		2, 1, 1, KHZ,	 403200,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("mselect",		2, 1, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+
+	CORE_DVFS("disp1",		2, 1, 0, KHZ,	 400000,  435000,  500000,  550000,  600000,  640000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000),
+	CORE_DVFS("disp2",		2, 1, 0, KHZ,	 400000,  435000,  500000,  550000,  600000,  640000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000),
+
+
+	CORE_DVFS("sor1",		2, 1, 1, KHZ,	      1,  297000,  297000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000),
+	CORE_DVFS("hda",		2, 1, 1, KHZ,	      1,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+	CORE_DVFS("hda2codec_2x",	2, 1, 1, KHZ,	      1,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000),
+	CORE_DVFS("maud",		2, 1, 1, KHZ,	      1,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+
+	/* Core voltages(mV):				    600,     625,     650,     675,     700,     725,     750,     775,     800,     825,     850,     875,     900,     925,     950,     975,    1000,    1025,    1050 */
+	CORE_DVFS("emc",		2, 2, 1, KHZ,	      1,       1,       1,       1,       1,       1,       1,       1, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000, 1600000),
+
+	CORE_DVFS("vic03",		2, 2, 1, KHZ,	 480000,  556800,  537600,  556800,  576000,  595200,  614400,  633600,  633600,  652800,  672000,  672000,  672000,  672000,  672000,  672000,  672000,  672000,  672000),
+	CORE_DVFS("nvjpg",		2, 2, 1, KHZ,	 480000,  556800,  537600,  556800,  576000,  595200,  614400,  633600,  633600,  652800,  672000,  672000,  672000,  672000,  672000,  672000,  672000,  672000,  672000),
+	CORE_DVFS("se",			2, 2, 1, KHZ,	 480000,  556800,  537600,  556800,  576000,  595200,  614400,  633600,  633600,  652800,  672000,  672000,  672000,  672000,  672000,  672000,  672000,  672000,  672000),
+	CORE_DVFS("tsecb",		2, 2, 1, KHZ,	 480000,  556800,  537600,  556800,  576000,  595200,  614400,  633600,  633600,  652800,  672000,  672000,  672000,  672000,  672000,  672000,  672000,  672000,  672000),
+	CORE_DVFS("c2bus",		2, 2, 1, KHZ,	 480000,  556800,  537600,  556800,  576000,  595200,  614400,  633600,  633600,  652800,  672000,  672000,  672000,  672000,  672000,  672000,  672000,  672000,  672000),
+
+	CORE_DVFS("nvenc",		2, 2, 1, KHZ,	 537600,  614400,  652800,  691200,  729600,  787200,  825600,  864000,  864000,  883200,  902400,  940800,  960000,  960000,  979200,  998400,  998400,  998400,  998400),
+	CORE_DVFS("nvdec",		2, 2, 1, KHZ,	 537600,  614400,  652800,  691200,  729600,  787200,  825600,  864000,  864000,  883200,  902400,  940800,  960000,  960000,  979200,  998400,  998400,  998400,  998400),
+	CORE_DVFS("c3bus",		2, 2, 1, KHZ,	 537600,  614400,  652800,  691200,  729600,  787200,  825600,  864000,  864000,  883200,  902400,  940800,  960000,  960000,  979200,  998400,  998400,  998400,  998400),
+
+	CORE_DVFS("vi",			2, 2, 1, KHZ,	 556800,  633600,  672000,  672000,  691200,  787200,  806400,  844800,  883200,  921600,  960000,  998400, 1036800, 1094400, 1113600, 1132800, 1132800, 1132800, 1132800),
+	CORE_DVFS("cbus",		2, 2, 1, KHZ,	 556800,  633600,  672000,  672000,  691200,  787200,  806400,  844800,  883200,  921600,  960000,  998400, 1036800, 1094400, 1113600, 1132800, 1132800, 1132800, 1132800),
+
+	CORE_DVFS("abus",		2, 2, 1, KHZ,	 748800,  825600,  883200,  979200, 1017600, 1036800, 1113600, 1132800, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400),
+	CORE_DVFS("aclk",		2, 2, 1, KHZ,	 748800,  825600,  883200,  979200, 1017600, 1036800, 1113600, 1132800, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400, 1190400),
+
+	CORE_DVFS("ape",		2, 2, 1, KHZ,	 518400,  614400,  633600,  691200,  748800,  748800,  844800,  883200,  921600,  960000,  998400,  998400,  998400,  998400,  998400,  998400,  998400,  998400,  998400),
+	CORE_DVFS("sbus",		2, 2, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("sclk",		2, 2, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+
+	CORE_DVFS("host1x",		2, 2, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("tsec",		2, 2, 1, KHZ,	 408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+	CORE_DVFS("mselect",		2, 2, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000,  408000),
+
+	CORE_DVFS("disp1",		2, 2, 0, KHZ,	 400000,  450000,  550000,  600000,  640000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000),
+	CORE_DVFS("disp2",		2, 2, 0, KHZ,	 400000,  450000,  550000,  600000,  640000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000,  665000),
+
+
+	CORE_DVFS("sor1",		2, 2, 1, KHZ,	 297000,  297000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000,  594000),
+	CORE_DVFS("hda",		2, 2, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+	CORE_DVFS("hda2codec_2x",	2, 2, 1, KHZ,	  48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000),
+	CORE_DVFS("maud",		2, 2, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+
+/* Common Tables */
+	/* Core voltages(mV):				    600,     625,     650,     675,     700,     725,     750,     775,     800,     825,     850,     875,     900,     925,     950,     975,    1000,    1025,    1050 */
+	CORE_DVFS("pll_a",		-1, -1, 1, KHZ,	1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000),
+	CORE_DVFS("pll_c",		-1, -1, 1, KHZ,	1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000),
+	CORE_DVFS("pll_c2",		-1, -1, 1, KHZ,	1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000),
+	CORE_DVFS("pll_c3",		-1, -1, 1, KHZ,	1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000),
+	CORE_DVFS("pll_c4_out0",	-1, -1, 1, KHZ,	1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000),
+	CORE_DVFS("pll_d_out0",		-1, -1, 1, KHZ,	1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000),
+	CORE_DVFS("pll_d2",		-1, -1, 1, KHZ,	1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000),
+	CORE_DVFS("pll_dp",		-1, -1, 1, KHZ,	1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000),
+
+	/* Core voltages(mV):				    600,     625,     650,     675,     700,     725,     750,     775,     800,     825,     850,     875,     900,     925,     950,     975,    1000,    1025,    1050 */
+	CORE_DVFS("csi",		-1, -1, 1, KHZ,	 750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000),
+	CORE_DVFS("cilab",		-1, -1, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  204000,  204000,  204000,  204000,  204000,  204000),
+	CORE_DVFS("cilcd",		-1, -1, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  204000,  204000,  204000,  204000,  204000,  204000),
+
+	CORE_DVFS("clk72mhz",		-1, -1, 1, KHZ,	  68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000,   68000),
+	CORE_DVFS("dsia",		-1, -1, 1, KHZ,	 750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000),
+	CORE_DVFS("dsib",		-1, -1, 1, KHZ,	 750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000),
+
+	CORE_DVFS("dsialp",		-1, -1, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+	CORE_DVFS("dsiblp",		-1, -1, 1, KHZ,	 102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000,  102000),
+
+
+
+	CORE_DVFS("i2s0",		-1, -1, 1, KHZ,	  24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576),
+	CORE_DVFS("i2s1",		-1, -1, 1, KHZ,	  24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576),
+	CORE_DVFS("i2s2",		-1, -1, 1, KHZ,	  24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576),
+	CORE_DVFS("i2s3",		-1, -1, 1, KHZ,	  24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576),
+	CORE_DVFS("i2s4",		-1, -1, 1, KHZ,	  24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576),
+
+	CORE_DVFS("d_audio",		-1, -1, 1, KHZ,	  98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304,   98304),
+	CORE_DVFS("spdif_in",		-1, -1, 1, KHZ,	 163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200,  163200),
+	CORE_DVFS("spdif_out",		-1, -1, 1, KHZ,	  24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576,   24576),
+	CORE_DVFS("dmic1",		-1, -1, 1, KHZ,	  12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288),
+	CORE_DVFS("dmic2",		-1, -1, 1, KHZ,	  12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288),
+	CORE_DVFS("dmic3",		-1, -1, 1, KHZ,	  12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288,   12288),
+
+
+
+
+	CORE_DVFS("sdmmc1",		-1, -1, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000),
+	CORE_DVFS("sdmmc3",		-1, -1, 1, KHZ,	 204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000,  204000),
+
+	CORE_DVFS("sdmmc1_ddr",		-1, -1, 1, KHZ,	  50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000),
+	CORE_DVFS("sdmmc3_ddr",		-1, -1, 1, KHZ,	  50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000,   50000),
+
+	CORE_DVFS("sdmmc2",		-1, -1, 1, KHZ,	 200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000),
+	CORE_DVFS("sdmmc4",		-1, -1, 1, KHZ,	 200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000),
+
+	CORE_DVFS("sdmmc_legacy",	-1, -1, 1, KHZ,	  12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000,   12000),
+
+	CORE_DVFS("xusb_falcon_src",	-1, -1, 1, KHZ,	 336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000,  336000),
+	CORE_DVFS("xusb_host_src",	-1, -1, 1, KHZ,	 112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000),
+	CORE_DVFS("xusb_dev_src",	-1, -1, 1, KHZ,	 112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000,  112000),
+	CORE_DVFS("xusb_ssp_src",	-1, -1, 1, KHZ,	 120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000,  120000),
+	CORE_DVFS("xusb_fs_src",	-1, -1, 1, KHZ,	  48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000),
+	CORE_DVFS("xusb_hs_src",	-1, -1, 1, KHZ,	 480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000),
+	CORE_DVFS("usbd",		-1, -1, 1, KHZ,	 480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000),
+	CORE_DVFS("usb2",		-1, -1, 1, KHZ,	 480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000,  480000),
+
+	CORE_DVFS("pcie",		-1, -1, 1, KHZ,	 500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000),
+
+	CORE_DVFS("i2c1",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("i2c2",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("i2c3",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("i2c4",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("i2c5",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("i2c6",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("vii2c",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+
+	CORE_DVFS("i2cslow",		-1, -1, 1, KHZ,	     33,      33,      33,      33,      33,      33,      33,      33,      33,      33,      33,      33,      33,      33,      33,      33,      33,      33,      33),
+	CORE_DVFS("pwm",		-1, -1, 1, KHZ,	  48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000,   48000),
+
+	CORE_DVFS("extern1",		-1, -1, 1, KHZ,	  49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152),
+	CORE_DVFS("extern2",		-1, -1, 1, KHZ,	  49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152),
+	CORE_DVFS("extern3",		-1, -1, 1, KHZ,	  49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152,   49152),
+
+	CORE_DVFS("soc_therm",		-1, -1, 1, KHZ,	 136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000,  136000),
+	CORE_DVFS("tsensor",		-1, -1, 1, KHZ,	  19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200,   19200),
+};
+
+static struct dvfs sor1_dpb01slt_dvfs_table[] = {
+	CORE_DVFS("sor1",		2, 0, 1, KHZ,	      1,       1,       1,  270000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000),
+	CORE_DVFS("sor1",		2, 1, 1, KHZ,	      1,  270000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000),
+	CORE_DVFS("sor1",		2, 2, 1, KHZ,	 270000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000,  540000),
+};
+
+static struct dvfs spib01slt_dvfs_table[] = {
+	CORE_DVFS("sbc1",		-1, -1, 1, KHZ,	  51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000),
+	CORE_DVFS("sbc2",		-1, -1, 1, KHZ,	  51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000),
+	CORE_DVFS("sbc3",		-1, -1, 1, KHZ,	  51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000),
+	CORE_DVFS("sbc4",		-1, -1, 1, KHZ,	  51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000,   51000),
+
+};
+
+static struct dvfs spi_slaveb01slt_dvfs_table[] = {
+	CORE_DVFS("sbc1",		-1, -1, 1, KHZ,	  45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000),
+	CORE_DVFS("sbc2",		-1, -1, 1, KHZ,	  45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000),
+	CORE_DVFS("sbc3",		-1, -1, 1, KHZ,	  45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000),
+	CORE_DVFS("sbc4",		-1, -1, 1, KHZ,	  45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000,   45000),
+
+};
+
+static struct dvfs qspi_sdrb01slt_dvfs_table[] = {
+	CORE_DVFS("qspi",		-1, -1, 1, KHZ,	 133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000,  133000),
+};
+
+static struct dvfs qspi_ddrb01slt_dvfs_table[] = {
+	CORE_DVFS("qspi",		-1, -1, 1, KHZ,	 200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000,  200000),
+};
+
+/* EMC DVB DVFS tables */
+static struct dvb_dvfs emcb01slt_dvb_dvfs_table[] = {
+	{
+		.speedo_id = -1,
+		.freqs_mult = KHZ,
+		.dvb_table = {
+			{  204000, {  600,  600,  600, } },
+			{  408000, {  600,  600,  600, } },
+			{  800000, {  600,  600,  600, } },
+			{ 1065600, {  600,  600,  600, } },
+			{ 1331200, {  650,  600,  600, } },
+			{ 1600000, {  650,  650,  625, } },
+			{ 0, { } },
+		},
+	},
+};
+
+static const char coreb01slt_dvfs_table_ver[] = "SOC - p4v3-AggressiveSLT SOC_IO - p4v2-AggressiveSLT SOC_EMC- p4v2-AggressiveSLT";
diff --git a/drivers/video/Kconfig b/drivers/video/Kconfig
index 834eb2314b2c..72fdad512485 100644
--- a/drivers/video/Kconfig
+++ b/drivers/video/Kconfig
@@ -76,6 +76,16 @@ if ARCH_TEGRA
 	source "drivers/video/tegra/nvmap/Kconfig"
 	source "drivers/video/tegra/nvgpu/Kconfig"
 
+config TEGRA_DC
+	tristate "Tegra Display Contoller"
+	depends on (TEGRA_GRHOST || TEGRA_HOST1X) && I2C
+	select BACKLIGHT_CLASS_DEVICE
+	select FB_MODE_HELPERS
+	help
+	 Tegra display controller support.
+	 Enable this to access the Tegra display controller using either framebuffer
+	 console interface and a proprietary dc-ext interface or with ADF.
+
 config TEGRA_BWMGR
 	bool "Use BWMGR"
 	default y
@@ -88,6 +98,12 @@ config TEGRA_DVFS
 	help
 	  say Y here to use DVFS
 
+config TEGRA_210_DVFS
+	bool "Use DVFS for the tegra210"
+	default y
+	help
+	  say Y here to use DVFS for the tegra210
+
 endif
 
 
diff --git a/drivers/video/tegra/nvgpu/os/linux/fuse.c b/drivers/video/tegra/nvgpu/os/linux/fuse.c
index c6b2bfdac999..d5ffbb7f5981 100644
--- a/drivers/video/tegra/nvgpu/os/linux/fuse.c
+++ b/drivers/video/tegra/nvgpu/os/linux/fuse.c
@@ -46,12 +46,10 @@ void nvgpu_tegra_fuse_write_opt_gpu_tpc1_disable(struct gk20a *g, u32 val)
 
 int nvgpu_tegra_fuse_read_gcplex_config_fuse(struct gk20a *g, u32 *val)
 {
-	return 0;
-	//return tegra_fuse_readl(FUSE_GCPLEX_CONFIG_FUSE_0, val);
+	return tegra_fuse_readl(FUSE_GCPLEX_CONFIG_FUSE_0, val);
 }
 
 int nvgpu_tegra_fuse_read_reserved_calib(struct gk20a *g, u32 *val)
 {
-	return 0;
-	//return tegra_fuse_readl(FUSE_RESERVED_CALIB0_0, val);
+	return tegra_fuse_readl(FUSE_RESERVED_CALIB0_0, val);
 }
diff --git a/drivers/video/tegra/nvgpu/os/linux/nvidia_p2p.c b/drivers/video/tegra/nvgpu/os/linux/nvidia_p2p.c
index 87db8c5c7645..8ec1942e53fa 100644
--- a/drivers/video/tegra/nvgpu/os/linux/nvidia_p2p.c
+++ b/drivers/video/tegra/nvgpu/os/linux/nvidia_p2p.c
@@ -33,8 +33,8 @@ static void nvidia_p2p_mn_release(struct mmu_notifier *mn,
 	page_table->free_callback(page_table->data);
 }
 
-static void nvidia_p2p_mn_invl_range_start(struct mmu_notifier *mn,
-	struct mm_struct *mm, unsigned long start, unsigned long end)
+static int nvidia_p2p_mn_invl_range_start(struct mmu_notifier *mn,
+	const struct mmu_notifier_range *range)
 {
 	struct nvidia_p2p_page_table *page_table = container_of(mn,
 						struct nvidia_p2p_page_table,
@@ -45,10 +45,11 @@ static void nvidia_p2p_mn_invl_range_start(struct mmu_notifier *mn,
 	vaddr = page_table->vaddr;
 	size = page_table->size;
 
-	if (vaddr >= start && vaddr <= end) {
-		mmu_notifier_unregister_no_release(&page_table->mn, page_table->mm);
+	if (vaddr >= range->start && vaddr <= range->end) {
+		mmu_notifier_unregister(&page_table->mn, page_table->mm);
 		page_table->free_callback(page_table->data);
 	}
+	return 0;
 }
 
 static struct mmu_notifier_ops nvidia_p2p_mmu_ops = {
@@ -62,7 +63,6 @@ int nvidia_p2p_get_pages(u64 vaddr, u64 size,
 {
 	int ret = 0;
 	int user_pages = 0;
-	int locked = 0;
 	int nr_pages = size >> PAGE_SHIFT;
 	struct page **pages;
 
@@ -80,12 +80,11 @@ int nvidia_p2p_get_pages(u64 vaddr, u64 size,
 		ret = -ENOMEM;
 		goto free_page_table;
 	}
-	down_read(&current->mm->mmap_sem);
-	locked = 1;
-	user_pages = get_user_pages_locked(vaddr & PAGE_MASK, nr_pages,
+	down_read(&current->mm->mmap_lock);
+	user_pages = get_user_pages(vaddr & PAGE_MASK, nr_pages,
 			FOLL_WRITE | FOLL_FORCE,
-			pages, &locked);
-	up_read(&current->mm->mmap_sem);
+			pages);
+	up_read(&current->mm->mmap_lock);
 	if (user_pages != nr_pages) {
 		ret = user_pages < 0 ? user_pages : -ENOMEM;
 		goto free_pages;
diff --git a/drivers/video/tegra/nvgpu/os/linux/platform_gk20a_tegra.c b/drivers/video/tegra/nvgpu/os/linux/platform_gk20a_tegra.c
index b3a8de47637a..104193bc7440 100644
--- a/drivers/video/tegra/nvgpu/os/linux/platform_gk20a_tegra.c
+++ b/drivers/video/tegra/nvgpu/os/linux/platform_gk20a_tegra.c
@@ -635,6 +635,7 @@ int gk20a_tegra_init_secure_alloc(struct gk20a_platform *platform)
 		return 0;
 
 	dma_set_attr(DMA_ATTR_NO_KERNEL_MAPPING, __DMA_ATTR(attrs));
+	dev_err(&tegra_vpr_dev, "test before dma_alloc_attrs\n");
 	(void)dma_alloc_attrs(&tegra_vpr_dev, platform->secure_buffer_size, &iova,
 				      GFP_KERNEL, __DMA_ATTR(attrs));
 	/* Some platforms disable VPR. In that case VPR allocations always
@@ -657,22 +658,17 @@ static struct clk *gk20a_clk_get(struct gk20a *g)
 {
 	if (!g->clk.tegra_clk) {
 		struct clk *clk, *clk_parent;
-		char clk_dev_id[32];
 		struct device *dev = dev_from_gk20a(g);
 
-		snprintf(clk_dev_id, 32, "tegra_%s", dev_name(dev));
-
-		clk = clk_get_sys(clk_dev_id, "gpu");
+		clk = clk_get(dev, "gpu");
 		if (IS_ERR(clk)) {
-			nvgpu_err(g, "fail to get tegra gpu clk %s/gpu\n",
-				  clk_dev_id);
+			nvgpu_err(g, "fail to get tegra gpu clk gpu\n");
 			return NULL;
 		}
 
 		clk_parent = clk_get_parent(clk);
 		if (IS_ERR_OR_NULL(clk_parent)) {
-			nvgpu_err(g, "fail to get tegra gpu clk parent%s/gpu\n",
-				  clk_dev_id);
+			nvgpu_err(g, "fail to get tegra gpu clk parent/gpu\n");
 			return NULL;
 		}
 
@@ -779,16 +775,15 @@ static int gk20a_tegra_probe(struct device *dev)
 	/* DVFS is not guaranteed to be initialized at the time of probe on
 	 * kernels with Common Clock Framework enabled.
 	 */
+	dev_err(dev, "platform gpu rail is %lx\n", (unsigned long)platform->gpu_rail);
+	platform->gpu_rail = tegra_dvfs_get_rail_by_name(GPU_RAIL_NAME);
 	if (!platform->gpu_rail) {
-		platform->gpu_rail = tegra_dvfs_get_rail_by_name(GPU_RAIL_NAME);
-		if (!platform->gpu_rail) {
-			nvgpu_log_info(g, "deferring probe no gpu_rail");
-			return -EPROBE_DEFER;
-		}
+	      dev_err(dev, "deferring probe no gpu_rail");
+	      return -EPROBE_DEFER;
 	}
 
 	if (!tegra_dvfs_is_rail_ready(platform->gpu_rail)) {
-		nvgpu_log_info(g, "deferring probe gpu_rail not ready");
+		dev_err(dev, "deferring probe gpu_rail not ready");
 		return -EPROBE_DEFER;
 	}
 #endif
@@ -796,7 +791,7 @@ static int gk20a_tegra_probe(struct device *dev)
 #ifdef CONFIG_TEGRA_GK20A_NVHOST
 	ret = nvgpu_get_nvhost_dev(platform->g);
 	if (ret) {
-		nvgpu_log_info(g, "failed to get nvhost");
+		dev_err(dev, "failed to get nvhost");
 		return ret;
 	}
 #endif
@@ -807,7 +802,7 @@ static int gk20a_tegra_probe(struct device *dev)
 #endif
 
 	if (joint_xpu_rail) {
-		nvgpu_log_info(g, "XPU rails are joint\n");
+		dev_err(dev, "XPU rails are joint\n");
 		platform->can_railgate_init = false;
 		__nvgpu_set_enabled(g, NVGPU_CAN_RAILGATE, false);
 	}
@@ -833,14 +828,14 @@ static int gk20a_tegra_probe(struct device *dev)
 	nvgpu_linux_init_clk_support(platform->g);
 	ret = gk20a_tegra_init_secure_alloc(platform);
 	if (ret) {
-		nvgpu_log_info(g, "failed to init secure alloc");
+		dev_err(dev, "failed to init secure alloc");
 		return ret;
 	}
 
 	if (platform->clk_register) {
 		ret = platform->clk_register(platform->g);
 		if (ret) {
-			nvgpu_log_info(g, "failed to register clk");
+			dev_err(dev, "failed to register clk");
 			return ret;
 		}
 	}
diff --git a/drivers/video/tegra/nvmap/nvmap_init.c b/drivers/video/tegra/nvmap/nvmap_init.c
index 6b95f08bd947..9e9fa7c734b9 100644
--- a/drivers/video/tegra/nvmap/nvmap_init.c
+++ b/drivers/video/tegra/nvmap/nvmap_init.c
@@ -54,7 +54,9 @@ bool __weak tegra_vpr_resize;
 
 struct device __weak tegra_generic_dev;
 
-struct device __weak tegra_vpr_dev;
+struct device __weak tegra_vpr_dev = {
+  .init_name = "tegra_vpr_dev",
+};
 EXPORT_SYMBOL(tegra_vpr_dev);
 
 struct device __weak tegra_iram_dev;
diff --git a/drivers/video/tegra/nvmap/nvmap_ioctl.c b/drivers/video/tegra/nvmap/nvmap_ioctl.c
index 7fbef88456f1..7c43253d2f6b 100644
--- a/drivers/video/tegra/nvmap/nvmap_ioctl.c
+++ b/drivers/video/tegra/nvmap/nvmap_ioctl.c
@@ -42,6 +42,7 @@
 #include "nvmap_priv.h"
 #include "nvmap_heap.h"
 
+int dma_set_resizable_heap_floor_size(struct device *dev, size_t floor_size);
 
 extern struct device tegra_vpr_dev;
 
@@ -186,7 +187,7 @@ int nvmap_ioctl_vpr_floor_size(struct file *filp, void __user *arg)
 	if (copy_from_user(&floor_size, arg, sizeof(floor_size)))
 		return -EFAULT;
 
-//	err = dma_set_resizable_heap_floor_size(&tegra_vpr_dev, floor_size);
+	err = dma_set_resizable_heap_floor_size(&tegra_vpr_dev, floor_size);
 	return err;
 }
 
diff --git a/include/dt-bindings/thermal/tegra210b01-trips.h b/include/dt-bindings/thermal/tegra210b01-trips.h
new file mode 100644
index 000000000000..f4cec8423dfa
--- /dev/null
+++ b/include/dt-bindings/thermal/tegra210b01-trips.h
@@ -0,0 +1,28 @@
+/*
+ * This header defines the trip temperatures for Tegra210b01
+ */
+#ifndef _DT_BINDINGS_THERMAL_TEGRA210B01_TRIPS_H
+#define _DT_BINDINGS_THERMAL_TEGRA210B01_TRIPS_H
+
+/* DFLL trips, in millicelsius */
+#define TEGRA210B01_DFLL_THERMAL_FLOOR_0	20000
+#define TEGRA210B01_DFLL_THERMAL_FLOOR_1	70000
+
+#define TEGRA210B01_DFLL_THERMAL_CAP_0		64000
+#define TEGRA210B01_DFLL_THERMAL_CAP_1		84000
+
+/* GPU DVFS thermal trips, in millicelsius */
+#define TEGRA210B01_GPU_DVFS_THERMAL_MIN	-25000
+#define TEGRA210B01_GPU_DVFS_THERMAL_TRIP_1	20000
+#define TEGRA210B01_GPU_DVFS_THERMAL_TRIP_2	30000
+#define TEGRA210B01_GPU_DVFS_THERMAL_TRIP_3	50000
+#define TEGRA210B01_GPU_DVFS_THERMAL_TRIP_4	70000
+#define TEGRA210B01_GPU_DVFS_THERMAL_TRIP_5	90000
+
+#define TEGRA210B01_GPU_DVFS_THERMAL_CAP_1	83000
+
+/* SoC DVFS thermal trips, in millicelsius */
+#define TEGRA210B01_SOC_THERMAL_FLOOR_0		20000
+#define TEGRA210B01_SOC_THERMAL_CAP_0		84000
+
+#endif /* _DT_BINDINGS_THERMAL_TEGRA210B01_TRIPS_H */
diff --git a/include/soc/tegra/fuse.h b/include/soc/tegra/fuse.h
index 01df707ef0cf..97bc3ca69d5e 100644
--- a/include/soc/tegra/fuse.h
+++ b/include/soc/tegra/fuse.h
@@ -22,6 +22,8 @@
 
 #define TEGRA_FUSE_SKU_CALIB_0	0xf0
 #define TEGRA30_FUSE_SATA_CALIB	0x124
+#define FUSE_GCPLEX_CONFIG_FUSE_0	0x1c8
+#define FUSE_RESERVED_CALIB0_0		0x204
 #define TEGRA_FUSE_USB_CALIB_EXT_0 0x250
 
 /* Tegra HIDREV/ChipID helper macros */
diff --git a/include/soc/tegra/tegra_emc.h b/include/soc/tegra/tegra_emc.h
new file mode 100644
index 000000000000..e28107aab32c
--- /dev/null
+++ b/include/soc/tegra/tegra_emc.h
@@ -0,0 +1,110 @@
+/*
+ * Copyright (C) 2011 Google, Inc.
+ * Copyright (C) 2016-2018, NVIDIA Corporation.  All rights reserved.
+ *
+ * Author:
+ *	Colin Cross <ccross@android.com>
+ *	Olof Johansson <olof@lixom.net>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef __TEGRA_EMC_H_
+#define __TEGRA_EMC_H_
+
+#define TEGRA_EMC_NUM_REGS 46
+
+enum {
+	TEGRA_DRAM_OVER_TEMP_NONE = 0,
+	TEGRA_DRAM_OVER_TEMP_REFRESH_X2,
+	TEGRA_DRAM_OVER_TEMP_REFRESH_X4,
+	TEGRA_DRAM_OVER_TEMP_THROTTLE, /* 4x Refresh + derating. */
+	TEGRA_DRAM_OVER_TEMP_MAX,
+};
+
+enum emc_user_id {
+	EMC_USER_DC1 = 0,
+	EMC_USER_DC2,
+	EMC_USER_VI,
+	EMC_USER_MSENC,
+	EMC_USER_2D,
+	EMC_USER_3D,
+	EMC_USER_BB,
+	EMC_USER_VDE,
+	EMC_USER_VI2,
+	EMC_USER_ISPA,
+	EMC_USER_ISPB,
+	EMC_USER_NVDEC,
+	EMC_USER_NVJPG,
+	EMC_USER_NUM,
+};
+
+struct tegra_emc_table {
+	unsigned long rate;
+	u32 regs[TEGRA_EMC_NUM_REGS];
+};
+
+struct tegra_emc_pdata {
+	int num_tables;
+	struct tegra_emc_table *tables;
+};
+
+struct emc_clk_ops {
+	long		(*emc_round_rate)(unsigned long);
+	int		(*emc_set_rate)(unsigned long);
+	unsigned long	(*emc_get_rate)(void);
+	struct clk *	(*emc_predict_parent)(unsigned long, unsigned long *);
+	void		(*emc_get_backup_parent)(struct clk **,
+							unsigned long *);
+};
+
+struct emc_iso_usage {
+	u32 emc_usage_flags;
+	u8 iso_usage_share;
+	u8 (*iso_share_calculator)(unsigned long iso_bw);
+};
+
+#ifdef CONFIG_TEGRA124_EMC
+void tegra124_emc_timing_invalidate(void);
+bool tegra124_emc_is_ready(void);
+unsigned long tegra124_predict_emc_rate(int millivolts);
+const struct emc_clk_ops *tegra124_emc_get_ops(void);
+#else
+static inline void tegra124_emc_timing_invalidate(void) { return; };
+static inline bool tegra124_emc_is_ready(void) { return true; };
+static inline unsigned long tegra124_predict_emc_rate(int millivolts)
+{ return -ENODEV; }
+static inline const struct emc_clk_ops *tegra124_emc_get_ops(void)
+{ return NULL; }
+#endif
+
+#ifdef CONFIG_TEGRA210_EMC
+void tegra210_emc_timing_invalidate(void);
+bool tegra210_emc_is_ready(void);
+unsigned long tegra210_predict_emc_rate(int millivolts);
+const struct emc_clk_ops *tegra210_emc_get_ops(void);
+int tegra210_emc_get_dram_temp(void);
+int tegra210_emc_set_over_temp_state(unsigned long state);
+void tegra210_emc_mr4_set_freq_thresh(unsigned long thresh);
+#else
+static inline void tegra210_emc_timing_invalidate(void) { return; }
+static inline bool tegra210_emc_is_ready(void) { return true; }
+static inline unsigned long tegra210_predict_emc_rate(int millivolts)
+{ return -ENODEV; }
+static inline const struct emc_clk_ops *tegra210_emc_get_ops(void)
+{ return NULL; }
+static inline int tegra210_emc_get_dram_temp(void) {return -ENODEV; }
+static inline int tegra210_emc_set_over_temp_state(unsigned long state)
+{ return -ENODEV; }
+static inline void tegra210_emc_mr4_set_freq_thresh(unsigned long thresh) { }
+#endif
+
+#endif
-- 
2.43.0

